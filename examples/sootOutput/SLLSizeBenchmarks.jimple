public class SLLSizeBenchmarks extends java.lang.Object
{
/*SLLSizeBenchmarks.java*/

/*[x]*/
    public static void analysisInitAcyclic(SLLSizeBenchmarks$Node)
    {
        SLLSizeBenchmarks$Node x;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 24 eline: 24 spos: 41 epos: 46 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 24 eline: 24 spos: 41 epos: 46 file: SLLSizeBenchmarks.java*/
    }

/*[]*/
    public static void analysisInitAllNulls()
    {
        return;
/*Source Line Pos Tag: sline: 31 eline: 32 spos: 2 epos: 2 file: SLLSizeBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertNotNull(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 37 eline: 37 spos: 43 epos: 48 file: SLLSizeBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 37 eline: 37 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 37 eline: 37 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
    }

/*[x, y, message]*/
    public static void analysisAssertReachable(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x, y;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 45 eline: 45 spos: 45 epos: 50 file: SLLSizeBenchmarks.java*/
        y := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 45 eline: 45 spos: 53 epos: 58 file: SLLSizeBenchmarks.java*/
        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 45 eline: 45 spos: 61 epos: 74 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 45 eline: 45 spos: 61 epos: 74 file: SLLSizeBenchmarks.java*/
    }

/*[x, y, message]*/
    public static void analysisAssertDisjoint(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x, y;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 52 eline: 52 spos: 44 epos: 49 file: SLLSizeBenchmarks.java*/
        y := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 52 eline: 52 spos: 52 epos: 57 file: SLLSizeBenchmarks.java*/
        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 52 eline: 52 spos: 60 epos: 73 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 52 eline: 52 spos: 60 epos: 73 file: SLLSizeBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertAcyclic(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 59 eline: 59 spos: 43 epos: 48 file: SLLSizeBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 59 eline: 59 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 59 eline: 59 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertCyclic(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 66 eline: 66 spos: 42 epos: 47 file: SLLSizeBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 66 eline: 66 spos: 50 epos: 63 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 66 eline: 66 spos: 50 epos: 63 file: SLLSizeBenchmarks.java*/
    }

/*[message]*/
    public static void analysisAssertNoGarbage(java.lang.String)
    {
        java.lang.String message;

        message := @parameter0: java.lang.String;
/*Source Line Pos Tag: sline: 76 eline: 76 spos: 45 epos: 58 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 76 eline: 76 spos: 45 epos: 58 file: SLLSizeBenchmarks.java*/
    }

/*[list1, list2, diff, message]*/
    public static void analysisLengthDiff(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, int, java.lang.String)
    {
        SLLSizeBenchmarks$Node list1, list2;
        int diff;
        java.lang.String message;

        list1 := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 83 eline: 83 spos: 40 epos: 49 file: SLLSizeBenchmarks.java*/
        list2 := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 83 eline: 83 spos: 52 epos: 61 file: SLLSizeBenchmarks.java*/
        diff := @parameter2: int;
/*Source Line Pos Tag: sline: 83 eline: 83 spos: 64 epos: 71 file: SLLSizeBenchmarks.java*/
        message := @parameter3: java.lang.String;
/*Source Line Pos Tag: sline: 83 eline: 83 spos: 74 epos: 87 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 83 eline: 83 spos: 74 epos: 87 file: SLLSizeBenchmarks.java*/
    }

/*[head, key]*/
    public SLLSizeBenchmarks$Node find(SLLSizeBenchmarks$Node, int)
    {
        SLLSizeBenchmarks this;
        SLLSizeBenchmarks$Node head, result, curr, temp$1;
        int key, temp$0;

        this := @this: SLLSizeBenchmarks;
/*Source Line Pos Tag: sline: 95 eline: 108 spos: 2 epos: 2 file: SLLSizeBenchmarks.java*/
/*V[0] = true // this := @this: SLLSizeBenchmarks*/
/*V[0] : true*/
/*V[1] = V[0] // this := @this: SLLSizeBenchmarks*/
/*V[1] : true*/
        head := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 95 eline: 95 spos: 19 epos: 27 file: SLLSizeBenchmarks.java*/
/*V[2] = V[1] // head := @parameter0: SLLSizeBenchmarks$Node*/
/*V[2] : true*/
        key := @parameter1: int;
/*Source Line Pos Tag: sline: 95 eline: 95 spos: 30 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[3] = V[2] // key := @parameter1: int*/
/*V[3] : true*/
        staticinvoke <SLLSizeBenchmarks: void analysisInitAcyclic(SLLSizeBenchmarks$Node)>(head);
/*Source Line Pos Tag: sline: 96 eline: 96 spos: 3 epos: 28 file: SLLSizeBenchmarks.java*/
/*V[4] = Reduce_SLLDomain(InitAcyclicTransformer(V[3])) // staticinvoke <SLLSizeBenchmarks: void analysisInitAcyclic(SLLSizeBenchmarks$Node)>(head)*/
/*V[4] : or(graph = {temp$1=null, curr=null, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-2]}, graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}, graph = {temp$1=null, curr=null, result=null, head=n0, n0.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1)]})*/
        result = null;
/*Source Line Pos Tag: sline: 98 eline: 98 spos: 3 epos: 21 file: SLLSizeBenchmarks.java*/
/*V[5] = Reduce_SLLDomain(AssignNullTransformer(V[4])) // result = null*/
/*V[5] : or(graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}, graph = {temp$1=null, curr=null, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-2]}, graph = {temp$1=null, curr=null, result=null, head=n0, n0.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1)]})*/
        curr = head;
/*Source Line Pos Tag: sline: 99 eline: 99 spos: 3 epos: 19 file: SLLSizeBenchmarks.java*/
/*V[6] = Reduce_SLLDomain(AssignRefToRefTransformer(V[5])) // curr = head*/
/*V[6] : or(graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/

     label1:
        if curr != null goto label2;
/*Source Line Pos Tag: sline: 100 eline: 100 spos: 10 epos: 21 file: SLLSizeBenchmarks.java*/
/*V[9] = JoinLoop_SLLDomain(V[6], V[20]) // if curr != null goto temp$0 = curr.<SLLSizeBenchmarks$Node: int data>*/
/*V[9] : or(graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/
/*V[8] = Reduce_SLLDomain(AssumeLocalEqNullTransformer(V[10])) // assume !(curr != null)*/
/*V[8] : graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}*/
/*V[10] = SLLDomain[Widening|Narrowing](V[10], V[9]) // if curr != null goto temp$0 = curr.<SLLSizeBenchmarks$Node: int data>*/
/*V[10] : or(graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [and(V0-len0<=-2, len0-V0<=1)]}, graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/
/*V[7] = Reduce_SLLDomain(!AssumeLocalEqNullTransformer(V[10])) // assume curr != null*/
/*V[7] : or(graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/

        goto label5;
/*Source Line Pos Tag: sline: 100 eline: 100 spos: 10 epos: 21 file: SLLSizeBenchmarks.java*/
/*V[11] = V[8] // goto [?= return result]*/
/*V[11] : graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}*/

     label2:
        temp$0 = curr.<SLLSizeBenchmarks$Node: int data>;
/*Source Line Pos Tag: sline: 101 eline: 101 spos: 8 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[12] = V[7] // temp$0 = curr.<SLLSizeBenchmarks$Node: int data>*/
/*V[12] : or(graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/
        if temp$0 == key goto label3;
/*Source Line Pos Tag: sline: 101 eline: 101 spos: 8 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[14] = Reduce_SLLDomain(!AssumeLocalEqLocalTransformer(V[12])) // assume !(temp$0 == key)*/
/*V[14] : false*/
/*V[13] = Reduce_SLLDomain(AssumeLocalEqLocalTransformer(V[12])) // assume temp$0 == key*/
/*V[13] : or(graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/

        goto label4;
/*Source Line Pos Tag: sline: 101 eline: 101 spos: 8 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[15] = V[14] // goto [?= temp$1 = curr.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>]*/
/*V[15] : false*/

     label3:
        result = curr;
/*Source Line Pos Tag: sline: 102 eline: 102 spos: 5 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[16] = Reduce_SLLDomain(AssignRefToRefTransformer(V[13])) // result = curr*/
/*V[16] : or(graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$1=null, curr=n0, result=n0, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/
        goto label5;
/*Source Line Pos Tag: sline: 103 eline: 103 spos: 5 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[17] = V[16] // goto [?= return result]*/
/*V[17] : or(graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$1=null, curr=n0, result=n0, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/

     label4:
        temp$1 = curr.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 105 eline: 105 spos: 4 epos: 20 file: SLLSizeBenchmarks.java*/
/*V[18] = Reduce_SLLDomain(AssignNextToLocalTransformer(V[15])) // temp$1 = curr.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[18] : false*/
        curr = temp$1;
/*Source Line Pos Tag: sline: 105 eline: 105 spos: 4 epos: 7 file: SLLSizeBenchmarks.java*/
/*V[19] = Reduce_SLLDomain(AssignRefToRefTransformer(V[18])) // curr = temp$1*/
/*V[19] : false*/
        goto label1;
/*Source Line Pos Tag: sline: 100 eline: 106 spos: 3 epos: 3 file: SLLSizeBenchmarks.java*/
/*V[20] = V[19] // goto [?= (branch)]*/
/*V[20] : false*/

     label5:
        return result;
/*Source Line Pos Tag: sline: 107 eline: 107 spos: 3 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[22] = Join_SLLDomain(V[11], V[17]) // return result*/
/*V[22] : or(graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}, graph = {temp$1=null, curr=n0, result=n0, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/
/*V[21] = V[22] // return result*/
/*V[21] : or(graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}, graph = {temp$1=null, curr=n0, result=n0, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/
    }

/*[size]*/
    public SLLSizeBenchmarks$Node createAndPrint(int)
    {
        SLLSizeBenchmarks this;
        int size, i, temp$2;
        SLLSizeBenchmarks$Node head1, head2, n1, temp$0, n2, temp$1, t1, t2, temp$3, temp$4;

        this := @this: SLLSizeBenchmarks;
/*Source Line Pos Tag: sline: 119 eline: 152 spos: 2 epos: 2 file: SLLSizeBenchmarks.java*/
/*V[1] = V[0] // this := @this: SLLSizeBenchmarks*/
/*V[1] : true*/
/*V[0] = true // this := @this: SLLSizeBenchmarks*/
/*V[0] : true*/
        size := @parameter0: int;
/*Source Line Pos Tag: sline: 119 eline: 119 spos: 29 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[2] = V[1] // size := @parameter0: int*/
/*V[2] : true*/
        staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>();
/*Source Line Pos Tag: sline: 120 eline: 120 spos: 3 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[3] = Reduce_SLLDomain(InitAllNullsTransformer(V[2])) // staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>()*/
/*V[3] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
        head1 = null;
/*Source Line Pos Tag: sline: 121 eline: 121 spos: 3 epos: 20 file: SLLSizeBenchmarks.java*/
/*V[4] = Reduce_SLLDomain(AssignNullTransformer(V[3])) // head1 = null*/
/*V[4] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
        head2 = null;
/*Source Line Pos Tag: sline: 122 eline: 122 spos: 3 epos: 20 file: SLLSizeBenchmarks.java*/
/*V[5] = Reduce_SLLDomain(AssignNullTransformer(V[4])) // head2 = null*/
/*V[5] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
        i = 0;
/*Source Line Pos Tag: sline: 123 eline: 123 spos: 8 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[6] = V[5] // i = 0*/
/*V[6] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/

     label1:
        if i < size goto label2;
/*Source Line Pos Tag: sline: 123 eline: 123 spos: 19 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[10] = SLLDomain[Widening|Narrowing](V[10], V[9]) // if i < size goto temp$0 = new SLLSizeBenchmarks$Node*/
/*V[10] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len0-V0<=1, len0-len1<=0, len3-len4<=0, V0-len2<=-1, len0-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len0-len3<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, len4-len3<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len3-len4<=0, V0-len2<=-1, len1-len2<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len0-len2<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len1-len0<=0, len3-len2<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len3-len4<=0, V0-len2<=-1, len1-len2<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len4-len2<=0, len2-len0<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len0-len2<=0, len2-len4<=0, len0-V0<=1, len0-len1<=0, len2-len3<=0, len0-len4<=0, len0-len3<=0, len2-V0<=1, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len1-len0<=0, len3-len2<=0)]})*/
/*V[9] = JoinLoop_SLLDomain(V[6], V[27]) // if i < size goto temp$0 = new SLLSizeBenchmarks$Node*/
/*V[9] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len0-V0<=1, len0-len1<=0, len3-len4<=0, V0-len2<=-1, len0-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len0-len3<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, len4-len3<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, V0-len2<=-1, len1-len2<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len0-len2<=0, len2-len4<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len0-len3<=0, len2-V0<=1, len4-V0<=1, len3-len1<=0, len3-len0<=0, len3-len2<=0, V0-len0<=-1, len1-len0<=0)]})*/
/*V[7] = V[10] // assume i < size*/
/*V[7] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len0-V0<=1, len0-len1<=0, len3-len4<=0, V0-len2<=-1, len0-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len0-len3<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, len4-len3<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]})*/
/*V[8] = V[10] // assume !(i < size)*/
/*V[8] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len0-V0<=1, len0-len1<=0, len3-len4<=0, V0-len2<=-1, len0-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len0-len3<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, len4-len3<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]})*/

        goto label3;
/*Source Line Pos Tag: sline: 123 eline: 123 spos: 19 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[11] = V[8] // goto [?= staticinvoke <SLLSizeBenchmarks: void analysisLengthDiff(SLLSizeBenchmarks$Node,SLLSizeBenchmarks$Node,int,java.lang.String)>(head1, head2, -1, "Unable to assert size difference!")]*/
/*V[11] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len0-V0<=1, len0-len1<=0, len3-len4<=0, V0-len2<=-1, len0-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len0-len3<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, len4-len3<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]})*/

     label2:
        temp$0 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 124 eline: 124 spos: 4 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[12] = Reduce_SLLDomain(AssignNewExprToLocalTransformer(V[7])) // temp$0 = new SLLSizeBenchmarks$Node*/
/*V[12] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=null, head2=null, head1=null, n0.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, n2.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len1-len2<=0, V0-len2<=-1, len3-len4<=0, len3-V0<=1, V0-len3<=-1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len2-len1<=0, len4-len3<=0, len2-len4<=0, len0-len2<=0, len0-V0<=1, len0-len1<=0, len2-len3<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len1-len0<=0, len3-len2<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, n2.next=null, ZoneState: [and(len2-len0<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-len3<=0, len3-V0<=1, V0-len3<=-1, len2-V0<=1, len0-len3<=0)]})*/
        specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 124 eline: 124 spos: 14 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[13] = V[12] // specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[13] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=null, head2=null, head1=null, n0.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, n2.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len1-len2<=0, V0-len2<=-1, len3-len4<=0, len3-V0<=1, V0-len3<=-1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len2-len1<=0, len4-len3<=0, len2-len4<=0, len0-len2<=0, len0-V0<=1, len0-len1<=0, len2-len3<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len1-len0<=0, len3-len2<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, n2.next=null, ZoneState: [and(len2-len0<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-len3<=0, len3-V0<=1, V0-len3<=-1, len2-V0<=1, len0-len3<=0)]})*/
        n1 = temp$0;
/*Source Line Pos Tag: sline: 124 eline: 124 spos: 14 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[14] = Reduce_SLLDomain(AssignRefToRefTransformer(V[13])) // n1 = temp$0*/
/*V[14] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=n0, head2=null, head1=null, n0.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0.next=null, n1.next=null, n2.next=null, ZoneState: [and(len2-len0<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-len3<=0, len3-V0<=1, V0-len3<=-1, len2-V0<=1, len0-len3<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0.next=null, n1.next=null, n2.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len1-len2<=0, V0-len2<=-1, len3-len4<=0, len3-V0<=1, V0-len3<=-1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len2-len1<=0, len4-len3<=0, len2-len4<=0, len0-len2<=0, len0-V0<=1, len0-len1<=0, len2-len3<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len1-len0<=0, len3-len2<=0)]})*/
        n1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = head1;
/*Source Line Pos Tag: sline: 125 eline: 125 spos: 7 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[15] = Reduce_SLLDomain(AssignLocalToNextFieldTransformer(V[14])) // n1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = head1*/
/*V[15] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=n0, head2=null, head1=null, n0.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0.next=null, n1.next=null, n2.next=n0, ZoneState: [and(len2-len0<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-len3<=0, len3-V0<=1, V0-len3<=-1, len2-V0<=1, len0-len3<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0.next=null, n1.next=null, n2.next=n0, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len1-len2<=0, V0-len2<=-1, len3-len4<=0, len3-V0<=1, V0-len3<=-1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len2-len1<=0, len4-len3<=0, len2-len4<=0, len0-len2<=0, len0-V0<=1, len0-len1<=0, len2-len3<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len1-len0<=0, len3-len2<=0)]})*/
        n1.<SLLSizeBenchmarks$Node: int data> = i;
/*Source Line Pos Tag: sline: 126 eline: 126 spos: 7 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[16] = V[15] // n1.<SLLSizeBenchmarks$Node: int data> = i*/
/*V[16] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=n0, head2=null, head1=null, n0.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0.next=null, n1.next=null, n2.next=n0, ZoneState: [and(len2-len0<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-len3<=0, len3-V0<=1, V0-len3<=-1, len2-V0<=1, len0-len3<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0.next=null, n1.next=null, n2.next=n0, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len1-len2<=0, V0-len2<=-1, len3-len4<=0, len3-V0<=1, V0-len3<=-1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len2-len1<=0, len4-len3<=0, len2-len4<=0, len0-len2<=0, len0-V0<=1, len0-len1<=0, len2-len3<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len1-len0<=0, len3-len2<=0)]})*/
        head1 = n1;
/*Source Line Pos Tag: sline: 127 eline: 127 spos: 4 epos: 8 file: SLLSizeBenchmarks.java*/
/*V[17] = Reduce_SLLDomain(AssignRefToRefTransformer(V[16])) // head1 = n1*/
/*V[17] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, V0-len2<=-1, len3-len4<=0, len1-len2<=0, V0-len3<=-1, len3-V0<=1, V0-len4<=-1, len1-len4<=0, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len2-len4<=0, len0-len2<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, ZoneState: [and(len3-len1<=0, len3-len0<=0, V0-len0<=-1, len1-len0<=0, len1-len3<=0, len1-V0<=1, V0-len1<=-1, len0-V0<=1, len0-len1<=0, V0-len3<=-1, len3-V0<=1, len0-len3<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=n0, head2=null, head1=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/
        temp$1 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 4 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[18] = Reduce_SLLDomain(AssignNewExprToLocalTransformer(V[17])) // temp$1 = new SLLSizeBenchmarks$Node*/
/*V[18] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=null, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, V0-len2<=-1, len3-len4<=0, len1-len2<=0, V0-len3<=-1, len3-V0<=1, V0-len4<=-1, len1-len4<=0, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len2-len4<=0, len0-len2<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=null, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, len0-V0<=1, len0-len1<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len0-len4<=0, len0-len3<=0, V0-len4<=-1, len1-len4<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, V0-len0<=-1, len1-len0<=0, len4-len3<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=null, temp$0=n0, n1=n0, head2=null, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]})*/
        specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 14 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[19] = V[18] // specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[19] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=null, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, V0-len2<=-1, len3-len4<=0, len1-len2<=0, V0-len3<=-1, len3-V0<=1, V0-len4<=-1, len1-len4<=0, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len2-len4<=0, len0-len2<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=null, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, len0-V0<=1, len0-len1<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len0-len4<=0, len0-len3<=0, V0-len4<=-1, len1-len4<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, V0-len0<=-1, len1-len0<=0, len4-len3<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=null, temp$0=n0, n1=n0, head2=null, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]})*/
        n2 = temp$1;
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 14 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[20] = Reduce_SLLDomain(AssignRefToRefTransformer(V[19])) // n2 = temp$1*/
/*V[20] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=null, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, V0-len2<=-1, len3-len4<=0, len1-len2<=0, V0-len3<=-1, len3-V0<=1, V0-len4<=-1, len1-len4<=0, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len2-len4<=0, len0-len2<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=null, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, len0-V0<=1, len0-len1<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len0-len4<=0, len0-len3<=0, V0-len4<=-1, len1-len4<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, V0-len0<=-1, len1-len0<=0, len4-len3<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=null, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]})*/
        n2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = head2;
/*Source Line Pos Tag: sline: 130 eline: 130 spos: 7 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[21] = Reduce_SLLDomain(AssignLocalToNextFieldTransformer(V[20])) // n2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = head2*/
/*V[21] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, V0-len2<=-1, len3-len4<=0, len1-len2<=0, V0-len3<=-1, len3-V0<=1, V0-len4<=-1, len1-len4<=0, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len2-len4<=0, len0-len2<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, len0-V0<=1, len0-len1<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len0-len4<=0, len0-len3<=0, V0-len4<=-1, len1-len4<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, V0-len0<=-1, len1-len0<=0, len4-len3<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=null, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]})*/
        n2.<SLLSizeBenchmarks$Node: int data> = i;
/*Source Line Pos Tag: sline: 131 eline: 131 spos: 7 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[22] = V[21] // n2.<SLLSizeBenchmarks$Node: int data> = i*/
/*V[22] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, V0-len2<=-1, len3-len4<=0, len1-len2<=0, V0-len3<=-1, len3-V0<=1, V0-len4<=-1, len1-len4<=0, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len2-len4<=0, len0-len2<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len2-V0<=1, len0-len3<=0, len4-V0<=1, len3-len1<=0, len3-len0<=0, V0-len0<=-1, len3-len2<=0, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-len3<=0, len1-V0<=1, V0-len1<=-1, len0-V0<=1, len0-len1<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len0-len4<=0, len0-len3<=0, V0-len4<=-1, len1-len4<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, V0-len0<=-1, len1-len0<=0, len4-len3<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=null, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]})*/
        head2 = n2;
/*Source Line Pos Tag: sline: 132 eline: 132 spos: 4 epos: 8 file: SLLSizeBenchmarks.java*/
/*V[23] = Reduce_SLLDomain(AssignRefToRefTransformer(V[22])) // head2 = n2*/
/*V[23] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, V0-len2<=-1, len1-len2<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len0-len2<=0, len2-len4<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len0-len3<=0, len2-V0<=1, len4-V0<=1, len3-len1<=0, len3-len0<=0, len3-len2<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len0-V0<=1, len0-len1<=0, len3-len4<=0, len0-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len0-len3<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, len4-len3<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]})*/
        staticinvoke <SLLSizeBenchmarks: void analysisAssertNoGarbage(java.lang.String)>("Unable to prove absence of garbage in create!");
/*Source Line Pos Tag: sline: 134 eline: 134 spos: 4 epos: 76 file: SLLSizeBenchmarks.java*/
/*V[24] = Reduce_SLLDomain(AssertNoGarbageTransformer(V[23])) // staticinvoke <SLLSizeBenchmarks: void analysisAssertNoGarbage(java.lang.String)>("Unable to prove absence of garbage in create!")*/
/*V[24] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, V0-len2<=-1, len1-len2<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len0-len2<=0, len2-len4<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len0-len3<=0, len2-V0<=1, len4-V0<=1, len3-len1<=0, len3-len0<=0, len3-len2<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len0-V0<=1, len0-len1<=0, len3-len4<=0, len0-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len0-len3<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, len4-len3<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]})*/
        temp$2 = i + 1;
/*Source Line Pos Tag: sline: 123 eline: 123 spos: 29 epos: 31 file: SLLSizeBenchmarks.java*/
/*V[25] = V[24] // temp$2 = i + 1*/
/*V[25] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, V0-len2<=-1, len1-len2<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len0-len2<=0, len2-len4<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len0-len3<=0, len2-V0<=1, len4-V0<=1, len3-len1<=0, len3-len0<=0, len3-len2<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len0-V0<=1, len0-len1<=0, len3-len4<=0, len0-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len0-len3<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, len4-len3<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]})*/
        i = temp$2;
/*Source Line Pos Tag: sline: 123 eline: 123 spos: 31 epos: 31 file: SLLSizeBenchmarks.java*/
/*V[26] = V[25] // i = temp$2*/
/*V[26] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, V0-len2<=-1, len1-len2<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len0-len2<=0, len2-len4<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len0-len3<=0, len2-V0<=1, len4-V0<=1, len3-len1<=0, len3-len0<=0, len3-len2<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len0-V0<=1, len0-len1<=0, len3-len4<=0, len0-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len0-len3<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, len4-len3<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]})*/
        goto label1;
/*Source Line Pos Tag: sline: 123 eline: 135 spos: 3 epos: 3 file: SLLSizeBenchmarks.java*/
/*V[27] = V[26] // goto [?= (branch)]*/
/*V[27] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, V0-len2<=-1, len1-len2<=0, len3-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len4-len3<=0, len2-len1<=0, len0-len2<=0, len2-len4<=0, len2-len3<=0, len0-V0<=1, len0-len1<=0, len0-len4<=0, len0-len3<=0, len2-V0<=1, len4-V0<=1, len3-len1<=0, len3-len0<=0, len3-len2<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0.next=null, n1.next=null, n2.next=n0, n3.next=n1, ZoneState: [and(len1-V0<=1, V0-len1<=-1, len1-len3<=0, len0-V0<=1, len0-len1<=0, len3-len4<=0, len0-len4<=0, V0-len3<=-1, len3-V0<=1, len1-len4<=0, V0-len4<=-1, len0-len3<=0, len4-V0<=1, len4-len0<=0, len3-len1<=0, len3-len0<=0, len4-len1<=0, len4-len3<=0, V0-len0<=-1, len1-len0<=0)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]})*/

     label3:
        staticinvoke <SLLSizeBenchmarks: void analysisLengthDiff(SLLSizeBenchmarks$Node,SLLSizeBenchmarks$Node,int,java.lang.String)>(head1, head2, -1, "Unable to assert size difference!");
/*Source Line Pos Tag: sline: 138 eline: 138 spos: 3 epos: 76 file: SLLSizeBenchmarks.java*/
/*V[28] = Reduce_SLLDomain(AssertLengthDiff(V[11])) // staticinvoke <SLLSizeBenchmarks: void analysisLengthDiff(SLLSizeBenchmarks$Node,SLLSizeBenchmarks$Node,int,java.lang.String)>(head1, head2, -1, "Unable to assert size difference!")*/
/*V[28] : false*/
/*Possible error!*/
        staticinvoke <SLLSizeBenchmarks: void analysisLengthDiff(SLLSizeBenchmarks$Node,SLLSizeBenchmarks$Node,int,java.lang.String)>(head2, head1, -5, "Unable to assert size difference!");
/*Source Line Pos Tag: sline: 139 eline: 139 spos: 3 epos: 76 file: SLLSizeBenchmarks.java*/
/*V[29] = Reduce_SLLDomain(AssertLengthDiff(V[28])) // staticinvoke <SLLSizeBenchmarks: void analysisLengthDiff(SLLSizeBenchmarks$Node,SLLSizeBenchmarks$Node,int,java.lang.String)>(head2, head1, -5, "Unable to assert size difference!")*/
/*V[29] : false*/
        t1 = head1;
/*Source Line Pos Tag: sline: 141 eline: 141 spos: 3 epos: 18 file: SLLSizeBenchmarks.java*/
/*V[30] = Reduce_SLLDomain(AssignRefToRefTransformer(V[29])) // t1 = head1*/
/*V[30] : false*/
        t2 = head2;
/*Source Line Pos Tag: sline: 142 eline: 142 spos: 3 epos: 18 file: SLLSizeBenchmarks.java*/
/*V[31] = Reduce_SLLDomain(AssignRefToRefTransformer(V[30])) // t2 = head2*/
/*V[31] : false*/

     label4:
        if t1 != null goto label5;
/*Source Line Pos Tag: sline: 143 eline: 143 spos: 10 epos: 19 file: SLLSizeBenchmarks.java*/
/*V[32] = Reduce_SLLDomain(!AssumeLocalEqNullTransformer(V[35])) // assume t1 != null*/
/*V[32] : false*/
/*V[35] = SLLDomain[Widening|Narrowing](V[35], V[34]) // if t1 != null goto temp$3 = t1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[35] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
/*V[33] = Reduce_SLLDomain(AssumeLocalEqNullTransformer(V[35])) // assume !(t1 != null)*/
/*V[33] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
/*V[34] = JoinLoop_SLLDomain(V[31], V[41]) // if t1 != null goto temp$3 = t1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[34] : false*/

        goto label6;
/*Source Line Pos Tag: sline: 143 eline: 143 spos: 10 epos: 19 file: SLLSizeBenchmarks.java*/
/*V[36] = V[33] // goto [?= return head1]*/
/*V[36] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/

     label5:
        temp$3 = t1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 146 eline: 146 spos: 4 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[37] = Reduce_SLLDomain(AssignNextToLocalTransformer(V[32])) // temp$3 = t1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[37] : false*/
        t1 = temp$3;
/*Source Line Pos Tag: sline: 146 eline: 146 spos: 4 epos: 5 file: SLLSizeBenchmarks.java*/
/*V[38] = Reduce_SLLDomain(AssignRefToRefTransformer(V[37])) // t1 = temp$3*/
/*V[38] : false*/
        temp$4 = t2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 149 eline: 149 spos: 4 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[39] = Reduce_SLLDomain(AssignNextToLocalTransformer(V[38])) // temp$4 = t2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[39] : false*/
        t2 = temp$4;
/*Source Line Pos Tag: sline: 149 eline: 149 spos: 4 epos: 5 file: SLLSizeBenchmarks.java*/
/*V[40] = Reduce_SLLDomain(AssignRefToRefTransformer(V[39])) // t2 = temp$4*/
/*V[40] : false*/
        goto label4;
/*Source Line Pos Tag: sline: 143 eline: 150 spos: 3 epos: 3 file: SLLSizeBenchmarks.java*/
/*V[41] = V[40] // goto [?= (branch)]*/
/*V[41] : false*/

     label6:
        return head1;
/*Source Line Pos Tag: sline: 151 eline: 151 spos: 3 epos: 15 file: SLLSizeBenchmarks.java*/
/*V[42] = V[36] // return head1*/
/*V[42] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
    }

/*[]*/
    public static void createAndPrintSmall()
    {
        SLLSizeBenchmarks$Node head, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, t, temp$7, temp$8, temp$9;

        staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>();
/*Source Line Pos Tag: sline: 155 eline: 155 spos: 3 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[1] = Reduce_SLLDomain(InitAllNullsTransformer(V[0])) // staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>()*/
/*V[1] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=null, head=null, ZoneState: [true]}*/
/*V[0] = true // staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>()*/
/*V[0] : true*/
        temp$0 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 156 eline: 156 spos: 3 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[2] = Reduce_SLLDomain(AssignNewExprToLocalTransformer(V[1])) // temp$0 = new SLLSizeBenchmarks$Node*/
/*V[2] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, head=null, n0.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1)]}*/
        specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 156 eline: 156 spos: 15 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[3] = V[2] // specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[3] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, head=null, n0.next=null, ZoneState: [and(len1-V0<=1, V0-len1<=-1)]}*/
        head = temp$0;
/*Source Line Pos Tag: sline: 156 eline: 156 spos: 15 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[4] = Reduce_SLLDomain(AssignRefToRefTransformer(V[3])) // head = temp$0*/
/*V[4] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]}*/
        temp$1 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 157 eline: 157 spos: 3 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[5] = Reduce_SLLDomain(AssignNewExprToLocalTransformer(V[4])) // temp$1 = new SLLSizeBenchmarks$Node*/
/*V[5] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, head=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]}*/
        specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 157 eline: 157 spos: 15 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[6] = V[5] // specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[6] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, head=n0, n0.next=null, n1.next=null, ZoneState: [and(len2-len0<=0, V0-len0<=-1, len0-len2<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]}*/
        head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$1;
/*Source Line Pos Tag: sline: 157 eline: 157 spos: 8 epos: 11 file: SLLSizeBenchmarks.java*/
/*V[7] = Reduce_SLLDomain(AssignLocalToNextFieldTransformer(V[6])) // head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$1*/
/*V[7] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=null, ZoneState: [and(len1-len0<=0, V0-len0<=-1, V0-len1<=-1, len1-V0<=1, len0-len1<=0, len0-V0<=1)]}*/
        temp$2 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 158 eline: 158 spos: 3 epos: 30 file: SLLSizeBenchmarks.java*/
/*V[8] = Reduce_SLLDomain(AssignNextToLocalTransformer(V[7])) // temp$2 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[8] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=null, ZoneState: [and(len1-len0<=0, V0-len0<=-1, V0-len1<=-1, len1-V0<=1, len0-len1<=0, len0-V0<=1)]}*/
        temp$3 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 158 eline: 158 spos: 3 epos: 30 file: SLLSizeBenchmarks.java*/
/*V[9] = Reduce_SLLDomain(AssignNewExprToLocalTransformer(V[8])) // temp$3 = new SLLSizeBenchmarks$Node*/
/*V[9] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=null, n2.next=null, ZoneState: [and(len3-len1<=0, len3-len0<=0, len1-len0<=0, V0-len0<=-1, V0-len1<=-1, len1-V0<=1, len1-len3<=0, len0-len1<=0, len0-V0<=1, len3-V0<=1, V0-len3<=-1, len0-len3<=0)]}*/
        specialinvoke temp$3.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 158 eline: 158 spos: 20 epos: 29 file: SLLSizeBenchmarks.java*/
/*V[10] = V[9] // specialinvoke temp$3.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[10] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=null, n2.next=null, ZoneState: [and(len3-len1<=0, len3-len0<=0, len1-len0<=0, V0-len0<=-1, V0-len1<=-1, len1-V0<=1, len1-len3<=0, len0-len1<=0, len0-V0<=1, len3-V0<=1, V0-len3<=-1, len0-len3<=0)]}*/
        temp$2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$3;
/*Source Line Pos Tag: sline: 158 eline: 158 spos: 13 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[11] = Reduce_SLLDomain(AssignLocalToNextFieldTransformer(V[10])) // temp$2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$3*/
/*V[11] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=null, ZoneState: [and(len2-len0<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1, V0-len1<=-1, len1-V0<=1, len0-len2<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]}*/
        temp$4 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 159 eline: 159 spos: 3 epos: 35 file: SLLSizeBenchmarks.java*/
/*V[12] = Reduce_SLLDomain(AssignNextToLocalTransformer(V[11])) // temp$4 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[12] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=null, ZoneState: [and(len2-len0<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1, V0-len1<=-1, len1-V0<=1, len0-len2<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]}*/
        temp$5 = temp$4.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 159 eline: 159 spos: 3 epos: 35 file: SLLSizeBenchmarks.java*/
/*V[13] = Reduce_SLLDomain(AssignNextToLocalTransformer(V[12])) // temp$5 = temp$4.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[13] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=null, ZoneState: [and(len2-len0<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1, V0-len1<=-1, len1-V0<=1, len0-len2<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, len2-V0<=1)]}*/
        temp$6 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 159 eline: 159 spos: 3 epos: 35 file: SLLSizeBenchmarks.java*/
/*V[14] = Reduce_SLLDomain(AssignNewExprToLocalTransformer(V[13])) // temp$6 = new SLLSizeBenchmarks$Node*/
/*V[14] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=null, n3.next=null, ZoneState: [and(V0-len1<=-1, len1-V0<=1, len0-len2<=0, len2-len4<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, len0-len4<=0, len2-V0<=1, V0-len4<=-1, len1-len4<=0, len4-V0<=1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1)]}*/
        specialinvoke temp$6.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 159 eline: 159 spos: 25 epos: 34 file: SLLSizeBenchmarks.java*/
/*V[15] = V[14] // specialinvoke temp$6.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[15] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=null, n3.next=null, ZoneState: [and(V0-len1<=-1, len1-V0<=1, len0-len2<=0, len2-len4<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, len0-len4<=0, len2-V0<=1, V0-len4<=-1, len1-len4<=0, len4-V0<=1, len4-len0<=0, len2-len0<=0, len4-len2<=0, len4-len1<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1)]}*/
        temp$5.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$6;
/*Source Line Pos Tag: sline: 159 eline: 159 spos: 18 epos: 21 file: SLLSizeBenchmarks.java*/
/*V[16] = Reduce_SLLDomain(AssignLocalToNextFieldTransformer(V[15])) // temp$5.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$6*/
/*V[16] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null, ZoneState: [and(V0-len1<=-1, len1-V0<=1, len0-len2<=0, len1-len3<=0, len2-len3<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, V0-len3<=-1, len3-V0<=1, len0-len3<=0, len2-V0<=1, len2-len0<=0, len3-len1<=0, len3-len0<=0, len3-len2<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1)]}*/
        temp$7 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 160 eline: 160 spos: 3 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[17] = Reduce_SLLDomain(AssignNextToLocalTransformer(V[16])) // temp$7 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[17] : graph = {temp$9=null, temp$8=null, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null, ZoneState: [and(V0-len1<=-1, len1-V0<=1, len0-len2<=0, len1-len3<=0, len2-len3<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, V0-len3<=-1, len3-V0<=1, len0-len3<=0, len2-V0<=1, len2-len0<=0, len3-len1<=0, len3-len0<=0, len3-len2<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1)]}*/
        temp$8 = temp$7.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 160 eline: 160 spos: 3 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[18] = Reduce_SLLDomain(AssignNextToLocalTransformer(V[17])) // temp$8 = temp$7.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[18] : graph = {temp$9=null, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null, ZoneState: [and(V0-len1<=-1, len1-V0<=1, len0-len2<=0, len1-len3<=0, len2-len3<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, V0-len3<=-1, len3-V0<=1, len0-len3<=0, len2-V0<=1, len2-len0<=0, len3-len1<=0, len3-len0<=0, len3-len2<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1)]}*/
        temp$9 = temp$8.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 160 eline: 160 spos: 3 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[19] = Reduce_SLLDomain(AssignNextToLocalTransformer(V[18])) // temp$9 = temp$8.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[19] : graph = {temp$9=n3, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null, ZoneState: [and(V0-len1<=-1, len1-V0<=1, len0-len2<=0, len1-len3<=0, len2-len3<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, V0-len3<=-1, len3-V0<=1, len0-len3<=0, len2-V0<=1, len2-len0<=0, len3-len1<=0, len3-len0<=0, len3-len2<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1)]}*/
        t = temp$9.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 160 eline: 160 spos: 3 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[20] = Reduce_SLLDomain(AssignNextToLocalTransformer(V[19])) // t = temp$9.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[20] : graph = {temp$9=n3, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null, ZoneState: [and(V0-len1<=-1, len1-V0<=1, len0-len2<=0, len1-len3<=0, len2-len3<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, V0-len3<=-1, len3-V0<=1, len0-len3<=0, len2-V0<=1, len2-len0<=0, len3-len1<=0, len3-len0<=0, len3-len2<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1)]}*/
        if t != null goto label1;
/*Source Line Pos Tag: sline: 161 eline: 161 spos: 7 epos: 15 file: SLLSizeBenchmarks.java*/
/*V[21] = Reduce_SLLDomain(!AssumeLocalEqNullTransformer(V[20])) // assume t != null*/
/*V[21] : false*/
/*V[22] = Reduce_SLLDomain(AssumeLocalEqNullTransformer(V[20])) // assume !(t != null)*/
/*V[22] : graph = {temp$9=n3, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null, ZoneState: [and(V0-len1<=-1, len1-V0<=1, len0-len2<=0, len1-len3<=0, len2-len3<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, V0-len3<=-1, len3-V0<=1, len0-len3<=0, len2-V0<=1, len2-len0<=0, len3-len1<=0, len3-len0<=0, len3-len2<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1)]}*/

        goto label1;
/*Source Line Pos Tag: sline: 161 eline: 161 spos: 7 epos: 15 file: SLLSizeBenchmarks.java*/
/*V[23] = V[22] // goto [?= return]*/
/*V[23] : graph = {temp$9=n3, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null, ZoneState: [and(V0-len1<=-1, len1-V0<=1, len0-len2<=0, len1-len3<=0, len2-len3<=0, len1-len2<=0, len0-len1<=0, len0-V0<=1, V0-len2<=-1, V0-len3<=-1, len3-V0<=1, len0-len3<=0, len2-V0<=1, len2-len0<=0, len3-len1<=0, len3-len0<=0, len3-len2<=0, len2-len1<=0, len1-len0<=0, V0-len0<=-1)]}*/

     label1:
        return;
/*Source Line Pos Tag: sline: 161 eline: 161 spos: 7 epos: 15 file: SLLSizeBenchmarks.java*/
/*V[25] = Join_SLLDomain(V[21], V[23]) // return*/
/*V[25] : false*/
/*V[24] = V[25] // return*/
/*V[24] : false*/
    }

/*[]*/
/*9*/
    public void <init>()
    {
        SLLSizeBenchmarks this;

        this := @this: SLLSizeBenchmarks;
/*10*/
        specialinvoke this.<java.lang.Object: void <init>()>();
/*10*/
        return;
/*10*/
    }
}
