public class SLLSizeBenchmarks extends java.lang.Object
{
/*SLLSizeBenchmarks.java*/

/*[x]*/
    public static void analysisInitAcyclic(SLLSizeBenchmarks$Node)
    {
        SLLSizeBenchmarks$Node x;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 24 eline: 24 spos: 41 epos: 46 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 24 eline: 24 spos: 41 epos: 46 file: SLLSizeBenchmarks.java*/
    }

/*[]*/
    public static void analysisInitAllNulls()
    {
        return;
/*Source Line Pos Tag: sline: 31 eline: 32 spos: 2 epos: 2 file: SLLSizeBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertNotNull(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 38 eline: 38 spos: 43 epos: 48 file: SLLSizeBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 38 eline: 38 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 38 eline: 38 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
    }

/*[x, y, message]*/
    public static void analysisAssertReachable(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x, y;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 47 eline: 47 spos: 45 epos: 50 file: SLLSizeBenchmarks.java*/
        y := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 47 eline: 47 spos: 53 epos: 58 file: SLLSizeBenchmarks.java*/
        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 47 eline: 47 spos: 61 epos: 74 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 47 eline: 47 spos: 61 epos: 74 file: SLLSizeBenchmarks.java*/
    }

/*[x, y, message]*/
    public static void analysisAssertDisjoint(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x, y;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 55 eline: 55 spos: 44 epos: 49 file: SLLSizeBenchmarks.java*/
        y := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 55 eline: 55 spos: 52 epos: 57 file: SLLSizeBenchmarks.java*/
        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 55 eline: 55 spos: 60 epos: 73 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 55 eline: 55 spos: 60 epos: 73 file: SLLSizeBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertAcyclic(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 63 eline: 63 spos: 43 epos: 48 file: SLLSizeBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 63 eline: 63 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 63 eline: 63 spos: 51 epos: 64 file: SLLSizeBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertCyclic(SLLSizeBenchmarks$Node, java.lang.String)
    {
        SLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 71 eline: 71 spos: 42 epos: 47 file: SLLSizeBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 71 eline: 71 spos: 50 epos: 63 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 71 eline: 71 spos: 50 epos: 63 file: SLLSizeBenchmarks.java*/
    }

/*[message]*/
    public static void analysisAssertNoGarbage(java.lang.String)
    {
        java.lang.String message;

        message := @parameter0: java.lang.String;
/*Source Line Pos Tag: sline: 82 eline: 82 spos: 45 epos: 58 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 82 eline: 82 spos: 45 epos: 58 file: SLLSizeBenchmarks.java*/
    }

/*[list1, list2, diff, message]*/
    public static void analysisLengthDiff(SLLSizeBenchmarks$Node, SLLSizeBenchmarks$Node, int, java.lang.String)
    {
        SLLSizeBenchmarks$Node list1, list2;
        int diff;
        java.lang.String message;

        list1 := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 89 eline: 89 spos: 40 epos: 49 file: SLLSizeBenchmarks.java*/
        list2 := @parameter1: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 89 eline: 89 spos: 52 epos: 61 file: SLLSizeBenchmarks.java*/
        diff := @parameter2: int;
/*Source Line Pos Tag: sline: 89 eline: 89 spos: 64 epos: 71 file: SLLSizeBenchmarks.java*/
        message := @parameter3: java.lang.String;
/*Source Line Pos Tag: sline: 89 eline: 89 spos: 74 epos: 87 file: SLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 89 eline: 89 spos: 74 epos: 87 file: SLLSizeBenchmarks.java*/
    }

/*[head, key]*/
    public SLLSizeBenchmarks$Node find(SLLSizeBenchmarks$Node, int)
    {
        SLLSizeBenchmarks this;
        SLLSizeBenchmarks$Node head, result, curr, temp$1;
        int key, temp$0;

        this := @this: SLLSizeBenchmarks;
/*Source Line Pos Tag: sline: 101 eline: 114 spos: 2 epos: 2 file: SLLSizeBenchmarks.java*/
/*V[1] = V[0] // this := @this: SLLSizeBenchmarks*/
/*V[1] : true*/
/*V[0] = true // this := @this: SLLSizeBenchmarks*/
/*V[0] : true*/
        head := @parameter0: SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 101 eline: 101 spos: 19 epos: 27 file: SLLSizeBenchmarks.java*/
/*V[2] = V[1] // head := @parameter0: SLLSizeBenchmarks$Node*/
/*V[2] : true*/
        key := @parameter1: int;
/*Source Line Pos Tag: sline: 101 eline: 101 spos: 30 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[3] = V[2] // key := @parameter1: int*/
/*V[3] : true*/
        staticinvoke <SLLSizeBenchmarks: void analysisInitAcyclic(SLLSizeBenchmarks$Node)>(head);
/*Source Line Pos Tag: sline: 102 eline: 102 spos: 3 epos: 28 file: SLLSizeBenchmarks.java*/
/*V[4] = InitAcyclicTransformer(V[3]) // staticinvoke <SLLSizeBenchmarks: void analysisInitAcyclic(SLLSizeBenchmarks$Node)>(head)*/
/*V[4] : or(graph = {temp$1=null, curr=null, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$1=null, curr=null, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-2]}, graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]})*/
        result = null;
/*Source Line Pos Tag: sline: 104 eline: 104 spos: 3 epos: 21 file: SLLSizeBenchmarks.java*/
/*V[5] = AssignNullTransformer(V[4]) // result = null*/
/*V[5] : or(graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}, graph = {temp$1=null, curr=null, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-2]}, graph = {temp$1=null, curr=null, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-1]})*/
        curr = head;
/*Source Line Pos Tag: sline: 105 eline: 105 spos: 3 epos: 19 file: SLLSizeBenchmarks.java*/
/*V[6] = AssignRefToRefTransformer(V[5]) // curr = head*/
/*V[6] : or(graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-2]})*/

     label1:
        if curr != null goto label2;
/*Source Line Pos Tag: sline: 106 eline: 106 spos: 10 epos: 21 file: SLLSizeBenchmarks.java*/
/*V[8] = AssumeLocalEqNullTransformer(V[9]) // assume !(curr != null)*/
/*V[8] : graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}*/
/*V[7] = !AssumeLocalEqNullTransformer(V[9]) // assume curr != null*/
/*V[7] : or(graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-2]})*/
/*V[9] = JoinLoop_SLLDomain(V[6], V[19]) // if curr != null goto temp$0 = curr.<SLLSizeBenchmarks$Node: int data>*/
/*V[9] : or(graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-2]})*/

        goto label5;
/*Source Line Pos Tag: sline: 106 eline: 106 spos: 10 epos: 21 file: SLLSizeBenchmarks.java*/
/*V[10] = V[8] // goto [?= return result]*/
/*V[10] : graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]}*/

     label2:
        temp$0 = curr.<SLLSizeBenchmarks$Node: int data>;
/*Source Line Pos Tag: sline: 107 eline: 107 spos: 8 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[11] = V[7] // temp$0 = curr.<SLLSizeBenchmarks$Node: int data>*/
/*V[11] : or(graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-2]})*/
        if temp$0 == key goto label3;
/*Source Line Pos Tag: sline: 107 eline: 107 spos: 8 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[12] = AssumeLocalEqLocalTransformer(V[11]) // assume temp$0 == key*/
/*V[12] : or(graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$1=null, curr=n0, result=null, head=n0, n0~>null, ZoneState: [V0-len1<=-2]})*/
/*V[13] = !AssumeLocalEqLocalTransformer(V[11]) // assume !(temp$0 == key)*/
/*V[13] : false*/

        goto label4;
/*Source Line Pos Tag: sline: 107 eline: 107 spos: 8 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[14] = V[13] // goto [?= temp$1 = curr.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>]*/
/*V[14] : false*/

     label3:
        result = curr;
/*Source Line Pos Tag: sline: 108 eline: 108 spos: 5 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[15] = AssignRefToRefTransformer(V[12]) // result = curr*/
/*V[15] : or(graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len1<=-2]}, graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len1<=-1]})*/
        goto label5;
/*Source Line Pos Tag: sline: 109 eline: 109 spos: 5 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[16] = V[15] // goto [?= return result]*/
/*V[16] : or(graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len1<=-2]}, graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len1<=-1]})*/

     label4:
        temp$1 = curr.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 111 eline: 111 spos: 4 epos: 20 file: SLLSizeBenchmarks.java*/
/*V[17] = AssignNextToLocalTransformer(V[14]) // temp$1 = curr.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[17] : false*/
        curr = temp$1;
/*Source Line Pos Tag: sline: 111 eline: 111 spos: 4 epos: 7 file: SLLSizeBenchmarks.java*/
/*V[18] = AssignRefToRefTransformer(V[17]) // curr = temp$1*/
/*V[18] : false*/
        goto label1;
/*Source Line Pos Tag: sline: 106 eline: 112 spos: 3 epos: 3 file: SLLSizeBenchmarks.java*/
/*V[19] = V[18] // goto [?= (branch)]*/
/*V[19] : false*/

     label5:
        return result;
/*Source Line Pos Tag: sline: 113 eline: 113 spos: 3 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[20] = V[21] // return result*/
/*V[20] : or(graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len1<=-2]}, graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]})*/
/*V[21] = Join_SLLDomain(V[10], V[16]) // return result*/
/*V[21] : or(graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len1<=-2]}, graph = {temp$1=null, curr=n0, result=n0, head=n0, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$1=null, curr=null, result=null, head=null, ZoneState: [true]})*/
    }

/*[size]*/
    public SLLSizeBenchmarks$Node createAndPrint(int)
    {
        SLLSizeBenchmarks this;
        int size, i, temp$2;
        SLLSizeBenchmarks$Node head1, head2, n1, temp$0, n2, temp$1, t1, t2, temp$3, temp$4;

        this := @this: SLLSizeBenchmarks;
/*Source Line Pos Tag: sline: 125 eline: 157 spos: 2 epos: 2 file: SLLSizeBenchmarks.java*/
/*V[0] = true // this := @this: SLLSizeBenchmarks*/
/*V[0] : true*/
/*V[1] = V[0] // this := @this: SLLSizeBenchmarks*/
/*V[1] : true*/
        size := @parameter0: int;
/*Source Line Pos Tag: sline: 125 eline: 125 spos: 29 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[2] = V[1] // size := @parameter0: int*/
/*V[2] : true*/
        staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>();
/*Source Line Pos Tag: sline: 126 eline: 126 spos: 3 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[3] = InitAllNullsTransformer(V[2]) // staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>()*/
/*V[3] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
        head1 = null;
/*Source Line Pos Tag: sline: 127 eline: 127 spos: 3 epos: 20 file: SLLSizeBenchmarks.java*/
/*V[4] = AssignNullTransformer(V[3]) // head1 = null*/
/*V[4] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
        head2 = null;
/*Source Line Pos Tag: sline: 128 eline: 128 spos: 3 epos: 20 file: SLLSizeBenchmarks.java*/
/*V[5] = AssignNullTransformer(V[4]) // head2 = null*/
/*V[5] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
        i = 0;
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 8 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[6] = V[5] // i = 0*/
/*V[6] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/

     label1:
        if i < size goto label2;
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 19 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[9] = JoinLoop_SLLDomain(V[6], V[25]) // if i < size goto temp$0 = new SLLSizeBenchmarks$Node*/
/*V[9] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]})*/
/*V[7] = V[9] // assume i < size*/
/*V[7] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]})*/
/*V[8] = V[9] // assume !(i < size)*/
/*V[8] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]})*/

        goto label3;
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 19 epos: 26 file: SLLSizeBenchmarks.java*/
/*V[10] = V[8] // goto [?= t1 = head1]*/
/*V[10] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]})*/

     label2:
        temp$0 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 130 eline: 130 spos: 4 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[11] = AssignNewExprToLocalTransformer(V[7]) // temp$0 = new SLLSizeBenchmarks$Node*/
/*V[11] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=null, head2=null, head1=null, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, n2~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, n2~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1)]})*/
        specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 130 eline: 130 spos: 14 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[12] = V[11] // specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[12] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=null, head2=null, head1=null, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, n2~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, n2~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1)]})*/
        n1 = temp$0;
/*Source Line Pos Tag: sline: 130 eline: 130 spos: 14 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[13] = AssignRefToRefTransformer(V[12]) // n1 = temp$0*/
/*V[13] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0~>null, n1~>null, n2~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0~>null, n1~>null, n2~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=n0, head2=null, head1=null, n0~>null, ZoneState: [V0-len1<=-1]})*/
        n1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = head1;
/*Source Line Pos Tag: sline: 131 eline: 131 spos: 7 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[14] = AssignLocalToNextFieldTransformer(V[13]) // n1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = head1*/
/*V[14] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0~>null, n1~>null, n2~>n0, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0~>null, n1~>null, n2~>n0, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=n0, head2=null, head1=null, n0~>null, ZoneState: [V0-len1<=-1]})*/
        n1.<SLLSizeBenchmarks$Node: int data> = i;
/*Source Line Pos Tag: sline: 132 eline: 132 spos: 7 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[15] = V[14] // n1.<SLLSizeBenchmarks$Node: int data> = i*/
/*V[15] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0~>null, n1~>null, n2~>n0, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n0, n0~>null, n1~>null, n2~>n0, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=n0, head2=null, head1=null, n0~>null, ZoneState: [V0-len1<=-1]})*/
        head1 = n1;
/*Source Line Pos Tag: sline: 133 eline: 133 spos: 4 epos: 8 file: SLLSizeBenchmarks.java*/
/*V[16] = AssignRefToRefTransformer(V[15]) // head1 = n1*/
/*V[16] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=n0, n1=n0, head2=null, head1=n0, n0~>null, ZoneState: [V0-len1<=-1]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1)]})*/
        temp$1 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 135 eline: 135 spos: 4 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[17] = AssignNewExprToLocalTransformer(V[16]) // temp$1 = new SLLSizeBenchmarks$Node*/
/*V[17] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=null, temp$0=n0, n1=n0, head2=null, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]})*/
        specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 135 eline: 135 spos: 14 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[18] = V[17] // specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[18] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=null, temp$0=n0, n1=n0, head2=null, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n1, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]})*/
        n2 = temp$1;
/*Source Line Pos Tag: sline: 135 eline: 135 spos: 14 epos: 23 file: SLLSizeBenchmarks.java*/
/*V[19] = AssignRefToRefTransformer(V[18]) // n2 = temp$1*/
/*V[19] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=null, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]})*/
        n2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = head2;
/*Source Line Pos Tag: sline: 136 eline: 136 spos: 7 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[20] = AssignLocalToNextFieldTransformer(V[19]) // n2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = head2*/
/*V[20] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=null, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]})*/
        n2.<SLLSizeBenchmarks$Node: int data> = i;
/*Source Line Pos Tag: sline: 137 eline: 137 spos: 7 epos: 10 file: SLLSizeBenchmarks.java*/
/*V[21] = V[20] // n2.<SLLSizeBenchmarks$Node: int data> = i*/
/*V[21] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=null, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n1, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]})*/
        head2 = n2;
/*Source Line Pos Tag: sline: 138 eline: 138 spos: 4 epos: 8 file: SLLSizeBenchmarks.java*/
/*V[22] = AssignRefToRefTransformer(V[21]) // head2 = n2*/
/*V[22] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]})*/
        temp$2 = i + 1;
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 29 epos: 31 file: SLLSizeBenchmarks.java*/
/*V[23] = V[22] // temp$2 = i + 1*/
/*V[23] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]})*/
        i = temp$2;
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 31 epos: 31 file: SLLSizeBenchmarks.java*/
/*V[24] = V[23] // i = temp$2*/
/*V[24] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]})*/
        goto label1;
/*Source Line Pos Tag: sline: 129 eline: 139 spos: 3 epos: 3 file: SLLSizeBenchmarks.java*/
/*V[25] = V[24] // goto [?= (branch)]*/
/*V[25] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n3, n2=n3, temp$0=n2, n1=n2, head2=n3, head1=n2, n0~>null, n1~>null, n2~>n0, n3~>n1, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]})*/

     label3:
        t1 = head1;
/*Source Line Pos Tag: sline: 146 eline: 146 spos: 3 epos: 18 file: SLLSizeBenchmarks.java*/
/*V[26] = AssignRefToRefTransformer(V[10]) // t1 = head1*/
/*V[26] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]})*/
        t2 = head2;
/*Source Line Pos Tag: sline: 147 eline: 147 spos: 3 epos: 18 file: SLLSizeBenchmarks.java*/
/*V[27] = AssignRefToRefTransformer(V[26]) // t2 = head2*/
/*V[27] : or(graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}, graph = {temp$4=null, temp$3=null, t2=n1, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=null, temp$3=null, t2=n1, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]})*/

     label4:
        if t1 != null goto label5;
/*Source Line Pos Tag: sline: 148 eline: 148 spos: 10 epos: 19 file: SLLSizeBenchmarks.java*/
/*V[29] = AssumeLocalEqNullTransformer(V[30]) // assume !(t1 != null)*/
/*V[29] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
/*V[28] = !AssumeLocalEqNullTransformer(V[30]) // assume t1 != null*/
/*V[28] : or(graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=n1, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len2<=-2, V0-len1<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=null, temp$3=null, t2=n1, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-2, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]})*/
/*V[30] = JoinLoop_SLLDomain(V[27], V[36]) // if t1 != null goto temp$3 = t1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[30] : or(graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=n1, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len2<=-2, V0-len1<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=null, temp$3=null, t2=n1, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-2, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-2, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]})*/

        goto label6;
/*Source Line Pos Tag: sline: 148 eline: 148 spos: 10 epos: 19 file: SLLSizeBenchmarks.java*/
/*V[31] = V[29] // goto [?= return head1]*/
/*V[31] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/

     label5:
        temp$3 = t1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 151 eline: 151 spos: 4 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[32] = AssignNextToLocalTransformer(V[28]) // temp$3 = t1.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[32] : or(graph = {temp$4=null, temp$3=n2, t2=n1, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>null, n2~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=n2, t2=n1, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>null, n2~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=null, temp$3=n2, t2=n1, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>null, n2~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len6<=-2)]}, graph = {temp$4=null, temp$3=n2, t2=n1, t1=n0, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>null, n2~>null, ZoneState: [and(V0-len0<=-1, V0-len2<=-2, V0-len1<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]})*/
        t1 = temp$3;
/*Source Line Pos Tag: sline: 151 eline: 151 spos: 4 epos: 5 file: SLLSizeBenchmarks.java*/
/*V[33] = AssignRefToRefTransformer(V[32]) // t1 = temp$3*/
/*V[33] : or(graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=null, temp$3=n2, t2=n1, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>null, n2~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=n2, t2=n1, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>null, n2~>null, ZoneState: [and(V0-len0<=-1, V0-len2<=-2, V0-len1<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len6<=-2)]}, graph = {temp$4=null, temp$3=n2, t2=n1, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>null, n2~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=null, temp$3=n2, t2=n1, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>null, n2~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len6<=-2)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>null, n4~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]})*/
        temp$4 = t2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 154 eline: 154 spos: 4 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[34] = AssignNextToLocalTransformer(V[33]) // temp$4 = t2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[34] : or(graph = {temp$4=n5, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n1, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n1, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n1, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n1, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len2<=-2, V0-len1<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n1, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n3, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]})*/
        t2 = temp$4;
/*Source Line Pos Tag: sline: 154 eline: 154 spos: 4 epos: 5 file: SLLSizeBenchmarks.java*/
/*V[35] = AssignRefToRefTransformer(V[34]) // t2 = temp$4*/
/*V[35] : or(graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len6<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len2<=-2, V0-len1<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]})*/
        goto label4;
/*Source Line Pos Tag: sline: 148 eline: 155 spos: 3 epos: 3 file: SLLSizeBenchmarks.java*/
/*V[36] = V[35] // goto [?= (branch)]*/
/*V[36] : or(graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len6<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len2<=-2, V0-len1<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len6<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]}, graph = {temp$4=n3, temp$3=n2, t2=n3, t1=n2, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>null, n3~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$4=n5, temp$3=n4, t2=n5, t1=n4, temp$1=n1, n2=n1, temp$0=n0, n1=n0, head2=n1, head1=n0, n0~>n2, n1~>n3, n2~>n4, n3~>n5, n4~>null, n5~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len6<=-1)]})*/

     label6:
        return head1;
/*Source Line Pos Tag: sline: 156 eline: 156 spos: 3 epos: 15 file: SLLSizeBenchmarks.java*/
/*V[37] = V[31] // return head1*/
/*V[37] : graph = {temp$4=null, temp$3=null, t2=null, t1=null, temp$1=null, n2=null, temp$0=null, n1=null, head2=null, head1=null, ZoneState: [true]}*/
    }

/*[]*/
    public static void createAndPrintSmall()
    {
        SLLSizeBenchmarks$Node head, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, t, temp$7, temp$8, temp$9;

        staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>();
/*Source Line Pos Tag: sline: 160 eline: 160 spos: 3 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[0] = true // staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>()*/
/*V[0] : true*/
/*V[1] = InitAllNullsTransformer(V[0]) // staticinvoke <SLLSizeBenchmarks: void analysisInitAllNulls()>()*/
/*V[1] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=null, head=null, ZoneState: [true]}*/
        temp$0 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 161 eline: 161 spos: 3 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[2] = AssignNewExprToLocalTransformer(V[1]) // temp$0 = new SLLSizeBenchmarks$Node*/
/*V[2] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, head=null, n0~>null, ZoneState: [V0-len1<=-1]}*/
        specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 161 eline: 161 spos: 15 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[3] = V[2] // specialinvoke temp$0.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[3] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, head=null, n0~>null, ZoneState: [V0-len1<=-1]}*/
        head = temp$0;
/*Source Line Pos Tag: sline: 161 eline: 161 spos: 15 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[4] = AssignRefToRefTransformer(V[3]) // head = temp$0*/
/*V[4] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, head=n0, n0~>null, ZoneState: [V0-len1<=-1]}*/
        temp$1 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 162 eline: 162 spos: 3 epos: 25 file: SLLSizeBenchmarks.java*/
/*V[5] = AssignNewExprToLocalTransformer(V[4]) // temp$1 = new SLLSizeBenchmarks$Node*/
/*V[5] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, head=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}*/
        specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 162 eline: 162 spos: 15 epos: 24 file: SLLSizeBenchmarks.java*/
/*V[6] = V[5] // specialinvoke temp$1.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[6] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, head=n0, n0~>null, n1~>null, ZoneState: [and(V0-len1<=-1, V0-len2<=-1)]}*/
        head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$1;
/*Source Line Pos Tag: sline: 162 eline: 162 spos: 8 epos: 11 file: SLLSizeBenchmarks.java*/
/*V[7] = AssignLocalToNextFieldTransformer(V[6]) // head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$1*/
/*V[7] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, head=n0, n0~>n1, n1~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1)]}*/
        temp$2 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 163 eline: 163 spos: 3 epos: 30 file: SLLSizeBenchmarks.java*/
/*V[8] = AssignNextToLocalTransformer(V[7]) // temp$2 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[8] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n2, n1~>null, n2~>n1, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1)]}*/
        temp$3 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 163 eline: 163 spos: 3 epos: 30 file: SLLSizeBenchmarks.java*/
/*V[9] = AssignNewExprToLocalTransformer(V[8]) // temp$3 = new SLLSizeBenchmarks$Node*/
/*V[9] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n2, n1~>null, n2~>n1, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}*/
        specialinvoke temp$3.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 163 eline: 163 spos: 20 epos: 29 file: SLLSizeBenchmarks.java*/
/*V[10] = V[9] // specialinvoke temp$3.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[10] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n2, n1~>null, n2~>n1, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}*/
        temp$2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$3;
/*Source Line Pos Tag: sline: 163 eline: 163 spos: 13 epos: 16 file: SLLSizeBenchmarks.java*/
/*V[11] = AssignLocalToNextFieldTransformer(V[10]) // temp$2.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$3*/
/*V[11] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n2, n1~>null, n2~>n3, n3~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}*/
        temp$4 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 164 eline: 164 spos: 3 epos: 35 file: SLLSizeBenchmarks.java*/
/*V[12] = AssignNextToLocalTransformer(V[11]) // temp$4 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[12] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n4, n1~>null, n2~>n3, n3~>null, n4~>n2, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}*/
        temp$5 = temp$4.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 164 eline: 164 spos: 3 epos: 35 file: SLLSizeBenchmarks.java*/
/*V[13] = AssignNextToLocalTransformer(V[12]) // temp$5 = temp$4.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[13] : or(graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n4, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n2, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1)]}, graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n4, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n2, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1)]})*/
        temp$6 = new SLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 164 eline: 164 spos: 3 epos: 35 file: SLLSizeBenchmarks.java*/
/*V[14] = AssignNewExprToLocalTransformer(V[13]) // temp$6 = new SLLSizeBenchmarks$Node*/
/*V[14] : or(graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n4, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n2, n6~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len7<=-1)]}, graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n4, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n2, n6~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len7<=-1)]})*/
        specialinvoke temp$6.<SLLSizeBenchmarks$Node: void <init>()>();
/*Source Line Pos Tag: sline: 164 eline: 164 spos: 25 epos: 34 file: SLLSizeBenchmarks.java*/
/*V[15] = V[14] // specialinvoke temp$6.<SLLSizeBenchmarks$Node: void <init>()>()*/
/*V[15] : or(graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n4, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n2, n6~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len7<=-1)]}, graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n4, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n2, n6~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len7<=-1)]})*/
        temp$5.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$6;
/*Source Line Pos Tag: sline: 164 eline: 164 spos: 18 epos: 21 file: SLLSizeBenchmarks.java*/
/*V[16] = AssignLocalToNextFieldTransformer(V[15]) // temp$5.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next> = temp$6*/
/*V[16] : or(graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n4, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len7<=-1)]}, graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n4, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len7<=-1)]})*/
        temp$7 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 165 eline: 165 spos: 3 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[17] = AssignNextToLocalTransformer(V[16]) // temp$7 = head.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[17] : or(graph = {temp$9=null, temp$8=null, temp$7=n7, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len7<=-1)]}, graph = {temp$9=null, temp$8=null, temp$7=n7, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len7<=-1)]})*/
        temp$8 = temp$7.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 165 eline: 165 spos: 3 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[18] = AssignNextToLocalTransformer(V[17]) // temp$8 = temp$7.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[18] : or(graph = {temp$9=null, temp$8=n8, temp$7=n7, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len4<=-1, V0-len7<=-1)]}, graph = {temp$9=null, temp$8=n8, temp$7=n7, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len7<=-1)]})*/
        temp$9 = temp$8.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 165 eline: 165 spos: 3 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[19] = AssignNextToLocalTransformer(V[18]) // temp$9 = temp$8.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[19] : graph = {temp$9=n9, temp$8=n8, temp$7=n7, t=null, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n9, n9~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len7<=-1)]}*/
        t = temp$9.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>;
/*Source Line Pos Tag: sline: 165 eline: 165 spos: 3 epos: 36 file: SLLSizeBenchmarks.java*/
/*V[20] = AssignNextToLocalTransformer(V[19]) // t = temp$9.<SLLSizeBenchmarks$Node: SLLSizeBenchmarks$Node next>*/
/*V[20] : or(graph = {temp$9=n9, temp$8=n8, temp$7=n7, t=n10, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n9, n9~>n10, n10~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len7<=-1)]}, graph = {temp$9=n9, temp$8=n8, temp$7=n7, t=n10, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n9, n9~>n10, n10~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len7<=-1)]})*/
        if t != null goto label1;
/*Source Line Pos Tag: sline: 166 eline: 166 spos: 7 epos: 15 file: SLLSizeBenchmarks.java*/
/*V[22] = AssumeLocalEqNullTransformer(V[20]) // assume !(t != null)*/
/*V[22] : false*/
/*V[21] = !AssumeLocalEqNullTransformer(V[20]) // assume t != null*/
/*V[21] : or(graph = {temp$9=n9, temp$8=n8, temp$7=n7, t=n10, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n9, n9~>n10, n10~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len7<=-1)]}, graph = {temp$9=n9, temp$8=n8, temp$7=n7, t=n10, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n9, n9~>n10, n10~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len7<=-1)]})*/

        goto label1;
/*Source Line Pos Tag: sline: 166 eline: 166 spos: 7 epos: 15 file: SLLSizeBenchmarks.java*/
/*V[23] = V[22] // goto [?= return]*/
/*V[23] : false*/

     label1:
        return;
/*Source Line Pos Tag: sline: 166 eline: 166 spos: 7 epos: 15 file: SLLSizeBenchmarks.java*/
/*V[24] = V[25] // return*/
/*V[24] : or(graph = {temp$9=n9, temp$8=n8, temp$7=n7, t=n10, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n9, n9~>n10, n10~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len7<=-1)]}, graph = {temp$9=n9, temp$8=n8, temp$7=n7, t=n10, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n9, n9~>n10, n10~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len7<=-1)]})*/
/*V[25] = Join_SLLDomain(V[21], V[23]) // return*/
/*V[25] : or(graph = {temp$9=n9, temp$8=n8, temp$7=n7, t=n10, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n9, n9~>n10, n10~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len5<=-1, V0-len7<=-1)]}, graph = {temp$9=n9, temp$8=n8, temp$7=n7, t=n10, temp$6=n6, temp$5=n5, temp$4=n4, temp$3=n3, temp$2=n2, temp$1=n1, temp$0=n0, head=n0, n0~>n7, n1~>null, n2~>n3, n3~>null, n4~>n5, n5~>n6, n6~>null, n7~>n8, n8~>n9, n9~>n10, n10~>n4, ZoneState: [and(V0-len0<=-1, V0-len1<=-1, V0-len2<=-1, V0-len3<=-1, V0-len4<=-1, V0-len7<=-1)]})*/
    }

/*[]*/
/*9*/
    public void <init>()
    {
        SLLSizeBenchmarks this;

        this := @this: SLLSizeBenchmarks;
/*10*/
        specialinvoke this.<java.lang.Object: void <init>()>();
/*10*/
        return;
/*10*/
    }
}
