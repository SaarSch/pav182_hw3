public class MySLLSizeBenchmarks extends java.lang.Object
{
/*MySLLSizeBenchmarks.java*/

/*[x]*/
    public static void analysisInitAcyclic(MySLLSizeBenchmarks$Node)
    {
        MySLLSizeBenchmarks$Node x;

        x := @parameter0: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 23 eline: 23 spos: 41 epos: 46 file: MySLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 23 eline: 23 spos: 41 epos: 46 file: MySLLSizeBenchmarks.java*/
    }

/*[]*/
    public static void analysisInitAllNulls()
    {
        return;
/*Source Line Pos Tag: sline: 30 eline: 31 spos: 2 epos: 2 file: MySLLSizeBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertNotNull(MySLLSizeBenchmarks$Node, java.lang.String)
    {
        MySLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 36 eline: 36 spos: 43 epos: 48 file: MySLLSizeBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 36 eline: 36 spos: 51 epos: 64 file: MySLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 36 eline: 36 spos: 51 epos: 64 file: MySLLSizeBenchmarks.java*/
    }

/*[x, y, message]*/
    public static void analysisAssertReachable(MySLLSizeBenchmarks$Node, MySLLSizeBenchmarks$Node, java.lang.String)
    {
        MySLLSizeBenchmarks$Node x, y;
        java.lang.String message;

        x := @parameter0: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 44 eline: 44 spos: 45 epos: 50 file: MySLLSizeBenchmarks.java*/
        y := @parameter1: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 44 eline: 44 spos: 53 epos: 58 file: MySLLSizeBenchmarks.java*/
        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 44 eline: 44 spos: 61 epos: 74 file: MySLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 44 eline: 44 spos: 61 epos: 74 file: MySLLSizeBenchmarks.java*/
    }

/*[x, y, message]*/
    public static void analysisAssertDisjoint(MySLLSizeBenchmarks$Node, MySLLSizeBenchmarks$Node, java.lang.String)
    {
        MySLLSizeBenchmarks$Node x, y;
        java.lang.String message;

        x := @parameter0: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 51 eline: 51 spos: 44 epos: 49 file: MySLLSizeBenchmarks.java*/
        y := @parameter1: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 51 eline: 51 spos: 52 epos: 57 file: MySLLSizeBenchmarks.java*/
        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 51 eline: 51 spos: 60 epos: 73 file: MySLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 51 eline: 51 spos: 60 epos: 73 file: MySLLSizeBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertAcyclic(MySLLSizeBenchmarks$Node, java.lang.String)
    {
        MySLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 58 eline: 58 spos: 43 epos: 48 file: MySLLSizeBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 58 eline: 58 spos: 51 epos: 64 file: MySLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 58 eline: 58 spos: 51 epos: 64 file: MySLLSizeBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertCyclic(MySLLSizeBenchmarks$Node, java.lang.String)
    {
        MySLLSizeBenchmarks$Node x;
        java.lang.String message;

        x := @parameter0: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 42 epos: 47 file: MySLLSizeBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 50 epos: 63 file: MySLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 50 epos: 63 file: MySLLSizeBenchmarks.java*/
    }

/*[message]*/
    public static void analysisAssertNoGarbage(java.lang.String)
    {
        java.lang.String message;

        message := @parameter0: java.lang.String;
/*Source Line Pos Tag: sline: 75 eline: 75 spos: 45 epos: 58 file: MySLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 75 eline: 75 spos: 45 epos: 58 file: MySLLSizeBenchmarks.java*/
    }

/*[list1, list2, diff, message]*/
    public static void analysisLengthDiff(MySLLSizeBenchmarks$Node, MySLLSizeBenchmarks$Node, int, java.lang.String)
    {
        MySLLSizeBenchmarks$Node list1, list2;
        int diff;
        java.lang.String message;

        list1 := @parameter0: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 82 eline: 82 spos: 40 epos: 49 file: MySLLSizeBenchmarks.java*/
        list2 := @parameter1: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 82 eline: 82 spos: 52 epos: 61 file: MySLLSizeBenchmarks.java*/
        diff := @parameter2: int;
/*Source Line Pos Tag: sline: 82 eline: 82 spos: 64 epos: 71 file: MySLLSizeBenchmarks.java*/
        message := @parameter3: java.lang.String;
/*Source Line Pos Tag: sline: 82 eline: 82 spos: 74 epos: 87 file: MySLLSizeBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 82 eline: 82 spos: 74 epos: 87 file: MySLLSizeBenchmarks.java*/
    }

/*[head]*/
    public MySLLSizeBenchmarks$Node testAcyclic(MySLLSizeBenchmarks$Node)
    {
        MySLLSizeBenchmarks this;
        MySLLSizeBenchmarks$Node head, temp$0;

        this := @this: MySLLSizeBenchmarks;
/*Source Line Pos Tag: sline: 93 eline: 100 spos: 2 epos: 2 file: MySLLSizeBenchmarks.java*/
/*V[1] = V[0] // this := @this: MySLLSizeBenchmarks*/
/*V[1] : true*/
/*V[0] = true // this := @this: MySLLSizeBenchmarks*/
/*V[0] : true*/
        head := @parameter0: MySLLSizeBenchmarks$Node;
/*Source Line Pos Tag: sline: 93 eline: 93 spos: 26 epos: 34 file: MySLLSizeBenchmarks.java*/
/*V[2] = V[1] // head := @parameter0: MySLLSizeBenchmarks$Node*/
/*V[2] : true*/
        staticinvoke <MySLLSizeBenchmarks: void analysisInitAcyclic(MySLLSizeBenchmarks$Node)>(head);
/*Source Line Pos Tag: sline: 94 eline: 94 spos: 3 epos: 28 file: MySLLSizeBenchmarks.java*/
/*V[3] = Reduce_SLLDomain(InitAcyclicTransformer(V[2])) // staticinvoke <MySLLSizeBenchmarks: void analysisInitAcyclic(MySLLSizeBenchmarks$Node)>(head)*/
/*V[3] : or(graph = {temp$0=null, head=null, ZoneState: [true]}, graph = {temp$0=null, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$0=null, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/
        staticinvoke <MySLLSizeBenchmarks: void analysisAssertAcyclic(MySLLSizeBenchmarks$Node,java.lang.String)>(head, "Not acyclic!");
/*Source Line Pos Tag: sline: 96 eline: 96 spos: 3 epos: 46 file: MySLLSizeBenchmarks.java*/
/*V[4] = Reduce_SLLDomain(AssertAcyclicTransformer(V[3])) // staticinvoke <MySLLSizeBenchmarks: void analysisAssertAcyclic(MySLLSizeBenchmarks$Node,java.lang.String)>(head, "Not acyclic!")*/
/*V[4] : or(graph = {temp$0=null, head=null, ZoneState: [true]}, graph = {temp$0=null, head=n0, n0~>null, ZoneState: [V0-len0<=-2]}, graph = {temp$0=null, head=n0, n0.next=null, ZoneState: [and(V0-len0<=-1, len0-V0<=1)]})*/
        staticinvoke <MySLLSizeBenchmarks: void analysisAssertCyclic(MySLLSizeBenchmarks$Node,java.lang.String)>(head, "Not cyclic!");
/*Source Line Pos Tag: sline: 97 eline: 97 spos: 3 epos: 44 file: MySLLSizeBenchmarks.java*/
/*V[5] = Reduce_SLLDomain(AssertCyclicTransformer(V[4])) // staticinvoke <MySLLSizeBenchmarks: void analysisAssertCyclic(MySLLSizeBenchmarks$Node,java.lang.String)>(head, "Not cyclic!")*/
/*V[5] : false*/
/*Possible error!*/
        temp$0 = null;
/*Source Line Pos Tag: sline: 97 eline: 97 spos: 3 epos: 44 file: MySLLSizeBenchmarks.java*/
/*V[6] = Reduce_SLLDomain(AssignNullTransformer(V[5])) // temp$0 = null*/
/*V[6] : false*/
        return temp$0;
/*Source Line Pos Tag: sline: 99 eline: 99 spos: 3 epos: 14 file: MySLLSizeBenchmarks.java*/
/*V[7] = V[6] // return temp$0*/
/*V[7] : false*/
    }

/*[]*/
/*8*/
    public void <init>()
    {
        MySLLSizeBenchmarks this;

        this := @this: MySLLSizeBenchmarks;
/*9*/
        specialinvoke this.<java.lang.Object: void <init>()>();
/*9*/
        return;
/*9*/
    }
}
