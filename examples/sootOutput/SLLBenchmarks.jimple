public class SLLBenchmarks extends java.lang.Object
{
/*SLLBenchmarks.java*/
    public SLLBenchmarks next;
    public int data;

/*[x]*/
    public static void analysisInitAcyclic(SLLBenchmarks)
    {
        SLLBenchmarks x;

        x := @parameter0: SLLBenchmarks;
/*Source Line Pos Tag: sline: 21 eline: 21 spos: 41 epos: 55 file: SLLBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 21 eline: 21 spos: 41 epos: 55 file: SLLBenchmarks.java*/
    }

/*[]*/
    public static void analysisInitAllNulls()
    {
        return;
/*Source Line Pos Tag: sline: 28 eline: 29 spos: 2 epos: 2 file: SLLBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertNotNull(SLLBenchmarks, java.lang.String)
    {
        SLLBenchmarks x;
        java.lang.String message;

        x := @parameter0: SLLBenchmarks;
/*Source Line Pos Tag: sline: 35 eline: 35 spos: 43 epos: 57 file: SLLBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 35 eline: 35 spos: 60 epos: 73 file: SLLBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 35 eline: 35 spos: 60 epos: 73 file: SLLBenchmarks.java*/
    }

/*[x, y, message]*/
    public static void analysisAssertReachable(SLLBenchmarks, SLLBenchmarks, java.lang.String)
    {
        SLLBenchmarks x, y;
        java.lang.String message;

        x := @parameter0: SLLBenchmarks;
/*Source Line Pos Tag: sline: 44 eline: 44 spos: 45 epos: 59 file: SLLBenchmarks.java*/
        y := @parameter1: SLLBenchmarks;
/*Source Line Pos Tag: sline: 44 eline: 44 spos: 62 epos: 76 file: SLLBenchmarks.java*/
        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 44 eline: 44 spos: 79 epos: 92 file: SLLBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 44 eline: 44 spos: 79 epos: 92 file: SLLBenchmarks.java*/
    }

/*[x, y, message]*/
    public static void analysisAssertDisjoint(SLLBenchmarks, SLLBenchmarks, java.lang.String)
    {
        SLLBenchmarks x, y;
        java.lang.String message;

        x := @parameter0: SLLBenchmarks;
/*Source Line Pos Tag: sline: 51 eline: 51 spos: 44 epos: 58 file: SLLBenchmarks.java*/
        y := @parameter1: SLLBenchmarks;
/*Source Line Pos Tag: sline: 51 eline: 51 spos: 61 epos: 75 file: SLLBenchmarks.java*/
        message := @parameter2: java.lang.String;
/*Source Line Pos Tag: sline: 51 eline: 51 spos: 78 epos: 91 file: SLLBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 51 eline: 51 spos: 78 epos: 91 file: SLLBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertAcyclic(SLLBenchmarks, java.lang.String)
    {
        SLLBenchmarks x;
        java.lang.String message;

        x := @parameter0: SLLBenchmarks;
/*Source Line Pos Tag: sline: 58 eline: 58 spos: 43 epos: 57 file: SLLBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 58 eline: 58 spos: 60 epos: 73 file: SLLBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 58 eline: 58 spos: 60 epos: 73 file: SLLBenchmarks.java*/
    }

/*[x, message]*/
    public static void analysisAssertCyclic(SLLBenchmarks, java.lang.String)
    {
        SLLBenchmarks x;
        java.lang.String message;

        x := @parameter0: SLLBenchmarks;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 42 epos: 56 file: SLLBenchmarks.java*/
        message := @parameter1: java.lang.String;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 59 epos: 72 file: SLLBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 65 eline: 65 spos: 59 epos: 72 file: SLLBenchmarks.java*/
    }

/*[message]*/
    public static void analysisAssertNoGarbage(java.lang.String)
    {
        java.lang.String message;

        message := @parameter0: java.lang.String;
/*Source Line Pos Tag: sline: 75 eline: 75 spos: 45 epos: 58 file: SLLBenchmarks.java*/
        return;
/*Source Line Pos Tag: sline: 75 eline: 75 spos: 45 epos: 58 file: SLLBenchmarks.java*/
    }

/*[key]*/
    public SLLBenchmarks find(int)
    {
        SLLBenchmarks this, result, curr, temp$1;
        int key, temp$0;

        this := @this: SLLBenchmarks;
/*Source Line Pos Tag: sline: 87 eline: 100 spos: 2 epos: 2 file: SLLBenchmarks.java*/
/*V[1] = V[0] // this := @this: SLLBenchmarks*/
/*V[1] : true*/
/*V[0] = true // this := @this: SLLBenchmarks*/
/*V[0] : true*/
        key := @parameter0: int;
/*Source Line Pos Tag: sline: 87 eline: 87 spos: 28 epos: 34 file: SLLBenchmarks.java*/
/*V[2] = V[1] // key := @parameter0: int*/
/*V[2] : true*/
        staticinvoke <SLLBenchmarks: void analysisInitAcyclic(SLLBenchmarks)>(this);
/*Source Line Pos Tag: sline: 88 eline: 88 spos: 23 epos: 26 file: SLLBenchmarks.java*/
/*V[3] = InitAcyclicTransformer(V[2]) // staticinvoke <SLLBenchmarks: void analysisInitAcyclic(SLLBenchmarks)>(this)*/
/*V[3] : or(graph = {temp$1=null, curr=null, result=null, this=null}, graph = {temp$1=null, curr=null, result=null, this=n0, n0.next=null}, graph = {temp$1=null, curr=null, result=null, this=n0, n0~>null})*/
        result = null;
/*Source Line Pos Tag: sline: 90 eline: 90 spos: 3 epos: 30 file: SLLBenchmarks.java*/
/*V[4] = AssignNullTransformer(V[3]) // result = null*/
/*V[4] : or(graph = {temp$1=null, curr=null, result=null, this=null}, graph = {temp$1=null, curr=null, result=null, this=n0, n0.next=null}, graph = {temp$1=null, curr=null, result=null, this=n0, n0~>null})*/
        curr = this;
/*Source Line Pos Tag: sline: 91 eline: 91 spos: 24 epos: 27 file: SLLBenchmarks.java*/
/*V[5] = AssignRefToRefTransformer(V[4]) // curr = this*/
/*V[5] : or(graph = {temp$1=null, curr=null, result=null, this=null}, graph = {temp$1=null, curr=n0, result=null, this=n0, n0.next=null}, graph = {temp$1=null, curr=n0, result=null, this=n0, n0~>null})*/

     label1:
        if curr != null goto label2;
/*Source Line Pos Tag: sline: 92 eline: 92 spos: 10 epos: 21 file: SLLBenchmarks.java*/
/*V[7] = AssumeLocalEqNullTransformer(V[8]) // assume !(curr != null)*/
/*V[7] : graph = {temp$1=null, curr=null, result=null, this=null}*/
/*V[8] = JoinLoop_SLLDomain(V[5], V[18]) // if curr != null goto temp$0 = curr.<SLLBenchmarks: int data>*/
/*V[8] : or(graph = {temp$1=null, curr=null, result=null, this=null}, graph = {temp$1=null, curr=n0, result=null, this=n0, n0.next=null}, graph = {temp$1=null, curr=n0, result=null, this=n0, n0~>null})*/
/*V[6] = !AssumeLocalEqNullTransformer(V[8]) // assume curr != null*/
/*V[6] : or(graph = {temp$1=null, curr=n0, result=null, this=n0, n0.next=null}, graph = {temp$1=null, curr=n0, result=null, this=n0, n0~>null})*/

        goto label5;
/*Source Line Pos Tag: sline: 92 eline: 92 spos: 10 epos: 21 file: SLLBenchmarks.java*/
/*V[9] = V[7] // goto [?= return result]*/
/*V[9] : graph = {temp$1=null, curr=null, result=null, this=null}*/

     label2:
        temp$0 = curr.<SLLBenchmarks: int data>;
/*Source Line Pos Tag: sline: 93 eline: 93 spos: 8 epos: 23 file: SLLBenchmarks.java*/
/*V[10] = V[6] // temp$0 = curr.<SLLBenchmarks: int data>*/
/*V[10] : or(graph = {temp$1=null, curr=n0, result=null, this=n0, n0.next=null}, graph = {temp$1=null, curr=n0, result=null, this=n0, n0~>null})*/
        if temp$0 == key goto label3;
/*Source Line Pos Tag: sline: 93 eline: 93 spos: 8 epos: 23 file: SLLBenchmarks.java*/
/*V[12] = !AssumeLocalEqLocalTransformer(V[10]) // assume !(temp$0 == key)*/
/*V[12] : false*/
/*V[11] = AssumeLocalEqLocalTransformer(V[10]) // assume temp$0 == key*/
/*V[11] : or(graph = {temp$1=null, curr=n0, result=null, this=n0, n0.next=null}, graph = {temp$1=null, curr=n0, result=null, this=n0, n0~>null})*/

        goto label4;
/*Source Line Pos Tag: sline: 93 eline: 93 spos: 8 epos: 23 file: SLLBenchmarks.java*/
/*V[13] = V[12] // goto [?= temp$1 = curr.<SLLBenchmarks: SLLBenchmarks next>]*/
/*V[13] : false*/

     label3:
        result = curr;
/*Source Line Pos Tag: sline: 94 eline: 94 spos: 5 epos: 10 file: SLLBenchmarks.java*/
/*V[14] = AssignRefToRefTransformer(V[11]) // result = curr*/
/*V[14] : or(graph = {temp$1=null, curr=n0, result=n0, this=n0, n0.next=null}, graph = {temp$1=null, curr=n0, result=n0, this=n0, n0~>null})*/
        goto label5;
/*Source Line Pos Tag: sline: 95 eline: 95 spos: 5 epos: 10 file: SLLBenchmarks.java*/
/*V[15] = V[14] // goto [?= return result]*/
/*V[15] : or(graph = {temp$1=null, curr=n0, result=n0, this=n0, n0.next=null}, graph = {temp$1=null, curr=n0, result=n0, this=n0, n0~>null})*/

     label4:
        temp$1 = curr.<SLLBenchmarks: SLLBenchmarks next>;
/*Source Line Pos Tag: sline: 97 eline: 97 spos: 4 epos: 20 file: SLLBenchmarks.java*/
/*V[16] = AssignNextToLocalTransformer(V[13]) // temp$1 = curr.<SLLBenchmarks: SLLBenchmarks next>*/
/*V[16] : false*/
        curr = temp$1;
/*Source Line Pos Tag: sline: 97 eline: 97 spos: 4 epos: 7 file: SLLBenchmarks.java*/
/*V[17] = AssignRefToRefTransformer(V[16]) // curr = temp$1*/
/*V[17] : false*/
        goto label1;
/*Source Line Pos Tag: sline: 92 eline: 98 spos: 3 epos: 3 file: SLLBenchmarks.java*/
/*V[18] = V[17] // goto [?= (branch)]*/
/*V[18] : false*/

     label5:
        return result;
/*Source Line Pos Tag: sline: 99 eline: 99 spos: 3 epos: 16 file: SLLBenchmarks.java*/
/*V[19] = V[20] // return result*/
/*V[19] : or(graph = {temp$1=null, curr=null, result=null, this=null}, graph = {temp$1=null, curr=n0, result=n0, this=n0, n0.next=null}, graph = {temp$1=null, curr=n0, result=n0, this=n0, n0~>null})*/
/*V[20] = Join_SLLDomain(V[9], V[15]) // return result*/
/*V[20] : or(graph = {temp$1=null, curr=null, result=null, this=null}, graph = {temp$1=null, curr=n0, result=n0, this=n0, n0.next=null}, graph = {temp$1=null, curr=n0, result=n0, this=n0, n0~>null})*/
    }

/*[size]*/
    public static SLLBenchmarks create(int)
    {
        int size, i, temp$1;
        SLLBenchmarks result, n, temp$0;

        size := @parameter0: int;
/*Source Line Pos Tag: sline: 110 eline: 110 spos: 37 epos: 44 file: SLLBenchmarks.java*/
/*V[0] = true // size := @parameter0: int*/
/*V[0] : true*/
/*V[1] = V[0] // size := @parameter0: int*/
/*V[1] : true*/
        staticinvoke <SLLBenchmarks: void analysisInitAllNulls()>();
/*Source Line Pos Tag: sline: 111 eline: 111 spos: 3 epos: 25 file: SLLBenchmarks.java*/
/*V[2] = InitAllNullsTransformer(V[1]) // staticinvoke <SLLBenchmarks: void analysisInitAllNulls()>()*/
/*V[2] : graph = {temp$0=null, n=null, result=null}*/
        result = null;
/*Source Line Pos Tag: sline: 114 eline: 114 spos: 3 epos: 30 file: SLLBenchmarks.java*/
/*V[3] = AssignNullTransformer(V[2]) // result = null*/
/*V[3] : graph = {temp$0=null, n=null, result=null}*/
        i = 0;
/*Source Line Pos Tag: sline: 115 eline: 115 spos: 8 epos: 16 file: SLLBenchmarks.java*/
/*V[4] = V[3] // i = 0*/
/*V[4] : graph = {temp$0=null, n=null, result=null}*/

     label1:
        if i < size goto label2;
/*Source Line Pos Tag: sline: 115 eline: 115 spos: 19 epos: 26 file: SLLBenchmarks.java*/
/*V[5] = V[7] // assume i < size*/
/*V[5] : or(graph = {temp$0=n0, n=n0, result=n0, n0~>null}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null}, graph = {temp$0=null, n=null, result=null})*/
/*V[7] = JoinLoop_SLLDomain(V[4], V[18]) // if i < size goto temp$0 = new SLLBenchmarks*/
/*V[7] : or(graph = {temp$0=n0, n=n0, result=n0, n0~>null}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null}, graph = {temp$0=null, n=null, result=null})*/
/*V[6] = V[7] // assume !(i < size)*/
/*V[6] : or(graph = {temp$0=n0, n=n0, result=n0, n0~>null}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null}, graph = {temp$0=null, n=null, result=null})*/

        goto label3;
/*Source Line Pos Tag: sline: 115 eline: 115 spos: 19 epos: 26 file: SLLBenchmarks.java*/
/*V[8] = V[6] // goto [?= staticinvoke <SLLBenchmarks: void analysisAssertAcyclic(SLLBenchmarks,java.lang.String)>(result, "Unable to assert that \'result\' points to an acyclic list!")]*/
/*V[8] : or(graph = {temp$0=n0, n=n0, result=n0, n0~>null}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null}, graph = {temp$0=null, n=null, result=null})*/

     label2:
        temp$0 = new SLLBenchmarks;
/*Source Line Pos Tag: sline: 116 eline: 116 spos: 4 epos: 41 file: SLLBenchmarks.java*/
/*V[9] = AssignNewExprToLocalTransformer(V[5]) // temp$0 = new SLLBenchmarks*/
/*V[9] : or(graph = {temp$0=n1, n=n0, result=n0, n0~>null, n1.next=null}, graph = {temp$0=n1, n=n0, result=n0, n0.next=null, n1.next=null}, graph = {temp$0=n0, n=null, result=null, n0.next=null})*/
        specialinvoke temp$0.<SLLBenchmarks: void <init>()>();
/*Source Line Pos Tag: sline: 116 eline: 116 spos: 22 epos: 40 file: SLLBenchmarks.java*/
/*V[10] = V[9] // specialinvoke temp$0.<SLLBenchmarks: void <init>()>()*/
/*V[10] : or(graph = {temp$0=n1, n=n0, result=n0, n0~>null, n1.next=null}, graph = {temp$0=n1, n=n0, result=n0, n0.next=null, n1.next=null}, graph = {temp$0=n0, n=null, result=null, n0.next=null})*/
        n = temp$0;
/*Source Line Pos Tag: sline: 116 eline: 116 spos: 22 epos: 40 file: SLLBenchmarks.java*/
/*V[11] = AssignRefToRefTransformer(V[10]) // n = temp$0*/
/*V[11] : or(graph = {temp$0=n0, n=n0, result=null, n0.next=null}, graph = {temp$0=n1, n=n1, result=n0, n0~>null, n1.next=null}, graph = {temp$0=n1, n=n1, result=n0, n0.next=null, n1.next=null})*/
        n.<SLLBenchmarks: SLLBenchmarks next> = result;
/*Source Line Pos Tag: sline: 117 eline: 117 spos: 6 epos: 9 file: SLLBenchmarks.java*/
/*V[12] = AssignLocalToNextFieldTransformer(V[11]) // n.<SLLBenchmarks: SLLBenchmarks next> = result*/
/*V[12] : or(graph = {temp$0=n0, n=n0, result=null, n0.next=null}, graph = {temp$0=n1, n=n1, result=n0, n0~>null, n1.next=n0}, graph = {temp$0=n1, n=n1, result=n0, n0.next=null, n1.next=n0})*/
        n.<SLLBenchmarks: int data> = i;
/*Source Line Pos Tag: sline: 118 eline: 118 spos: 6 epos: 9 file: SLLBenchmarks.java*/
/*V[13] = V[12] // n.<SLLBenchmarks: int data> = i*/
/*V[13] : or(graph = {temp$0=n0, n=n0, result=null, n0.next=null}, graph = {temp$0=n1, n=n1, result=n0, n0~>null, n1.next=n0}, graph = {temp$0=n1, n=n1, result=n0, n0.next=null, n1.next=n0})*/
        result = n;
/*Source Line Pos Tag: sline: 119 eline: 119 spos: 4 epos: 9 file: SLLBenchmarks.java*/
/*V[14] = AssignRefToRefTransformer(V[13]) // result = n*/
/*V[14] : or(graph = {temp$0=n1, n=n1, result=n1, n0~>null, n1.next=n0}, graph = {temp$0=n1, n=n1, result=n1, n0.next=null, n1.next=n0}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null})*/
        staticinvoke <SLLBenchmarks: void analysisAssertNoGarbage(java.lang.String)>("Unable to prove absence of garbage in create!");
/*Source Line Pos Tag: sline: 120 eline: 120 spos: 4 epos: 76 file: SLLBenchmarks.java*/
/*V[15] = V[14] // staticinvoke <SLLBenchmarks: void analysisAssertNoGarbage(java.lang.String)>("Unable to prove absence of garbage in create!")*/
/*V[15] : or(graph = {temp$0=n1, n=n1, result=n1, n0~>null, n1.next=n0}, graph = {temp$0=n1, n=n1, result=n1, n0.next=null, n1.next=n0}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null})*/
        temp$1 = i + 1;
/*Source Line Pos Tag: sline: 115 eline: 115 spos: 29 epos: 31 file: SLLBenchmarks.java*/
/*V[16] = V[15] // temp$1 = i + 1*/
/*V[16] : or(graph = {temp$0=n1, n=n1, result=n1, n0~>null, n1.next=n0}, graph = {temp$0=n1, n=n1, result=n1, n0.next=null, n1.next=n0}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null})*/
        i = temp$1;
/*Source Line Pos Tag: sline: 115 eline: 115 spos: 31 epos: 31 file: SLLBenchmarks.java*/
/*V[17] = V[16] // i = temp$1*/
/*V[17] : or(graph = {temp$0=n1, n=n1, result=n1, n0~>null, n1.next=n0}, graph = {temp$0=n1, n=n1, result=n1, n0.next=null, n1.next=n0}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null})*/
        goto label1;
/*Source Line Pos Tag: sline: 115 eline: 121 spos: 3 epos: 3 file: SLLBenchmarks.java*/
/*V[18] = V[17] // goto [?= (branch)]*/
/*V[18] : or(graph = {temp$0=n1, n=n1, result=n1, n0~>null, n1.next=n0}, graph = {temp$0=n1, n=n1, result=n1, n0.next=null, n1.next=n0}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null})*/

     label3:
        staticinvoke <SLLBenchmarks: void analysisAssertAcyclic(SLLBenchmarks,java.lang.String)>(result, "Unable to assert that \'result\' points to an acyclic list!");
/*Source Line Pos Tag: sline: 123 eline: 123 spos: 3 epos: 93 file: SLLBenchmarks.java*/
/*V[19] = V[8] // staticinvoke <SLLBenchmarks: void analysisAssertAcyclic(SLLBenchmarks,java.lang.String)>(result, "Unable to assert that \'result\' points to an acyclic list!")*/
/*V[19] : or(graph = {temp$0=n0, n=n0, result=n0, n0~>null}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null}, graph = {temp$0=null, n=null, result=null})*/
        return result;
/*Source Line Pos Tag: sline: 124 eline: 124 spos: 3 epos: 16 file: SLLBenchmarks.java*/
/*V[20] = V[19] // return result*/
/*V[20] : or(graph = {temp$0=n0, n=n0, result=n0, n0~>null}, graph = {temp$0=n0, n=n0, result=n0, n0.next=null}, graph = {temp$0=null, n=null, result=null})*/
    }

/*[]*/
    public static void createAndPrintSmall()
    {
        SLLBenchmarks head, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, t, temp$7, temp$8, temp$9;

        staticinvoke <SLLBenchmarks: void analysisInitAllNulls()>();
/*Source Line Pos Tag: sline: 128 eline: 128 spos: 3 epos: 25 file: SLLBenchmarks.java*/
/*V[0] = true // staticinvoke <SLLBenchmarks: void analysisInitAllNulls()>()*/
/*V[0] : true*/
/*V[1] = InitAllNullsTransformer(V[0]) // staticinvoke <SLLBenchmarks: void analysisInitAllNulls()>()*/
/*V[1] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=null, head=null}*/
        temp$0 = new SLLBenchmarks;
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 3 epos: 43 file: SLLBenchmarks.java*/
/*V[2] = AssignNewExprToLocalTransformer(V[1]) // temp$0 = new SLLBenchmarks*/
/*V[2] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, head=null, n0.next=null}*/
        specialinvoke temp$0.<SLLBenchmarks: void <init>()>();
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 24 epos: 42 file: SLLBenchmarks.java*/
/*V[3] = V[2] // specialinvoke temp$0.<SLLBenchmarks: void <init>()>()*/
/*V[3] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, head=null, n0.next=null}*/
        head = temp$0;
/*Source Line Pos Tag: sline: 129 eline: 129 spos: 24 epos: 42 file: SLLBenchmarks.java*/
/*V[4] = AssignRefToRefTransformer(V[3]) // head = temp$0*/
/*V[4] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=null, temp$0=n0, head=n0, n0.next=null}*/
        temp$1 = new SLLBenchmarks;
/*Source Line Pos Tag: sline: 130 eline: 130 spos: 3 epos: 34 file: SLLBenchmarks.java*/
/*V[5] = AssignNewExprToLocalTransformer(V[4]) // temp$1 = new SLLBenchmarks*/
/*V[5] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, head=n0, n0.next=null, n1.next=null}*/
        specialinvoke temp$1.<SLLBenchmarks: void <init>()>();
/*Source Line Pos Tag: sline: 130 eline: 130 spos: 15 epos: 33 file: SLLBenchmarks.java*/
/*V[6] = V[5] // specialinvoke temp$1.<SLLBenchmarks: void <init>()>()*/
/*V[6] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, head=n0, n0.next=null, n1.next=null}*/
        head.<SLLBenchmarks: SLLBenchmarks next> = temp$1;
/*Source Line Pos Tag: sline: 130 eline: 130 spos: 8 epos: 11 file: SLLBenchmarks.java*/
/*V[7] = AssignLocalToNextFieldTransformer(V[6]) // head.<SLLBenchmarks: SLLBenchmarks next> = temp$1*/
/*V[7] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=null, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=null}*/
        temp$2 = head.<SLLBenchmarks: SLLBenchmarks next>;
/*Source Line Pos Tag: sline: 131 eline: 131 spos: 3 epos: 39 file: SLLBenchmarks.java*/
/*V[8] = AssignNextToLocalTransformer(V[7]) // temp$2 = head.<SLLBenchmarks: SLLBenchmarks next>*/
/*V[8] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=null, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=null}*/
        temp$3 = new SLLBenchmarks;
/*Source Line Pos Tag: sline: 131 eline: 131 spos: 3 epos: 39 file: SLLBenchmarks.java*/
/*V[9] = AssignNewExprToLocalTransformer(V[8]) // temp$3 = new SLLBenchmarks*/
/*V[9] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=null, n2.next=null}*/
        specialinvoke temp$3.<SLLBenchmarks: void <init>()>();
/*Source Line Pos Tag: sline: 131 eline: 131 spos: 20 epos: 38 file: SLLBenchmarks.java*/
/*V[10] = V[9] // specialinvoke temp$3.<SLLBenchmarks: void <init>()>()*/
/*V[10] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=null, n2.next=null}*/
        temp$2.<SLLBenchmarks: SLLBenchmarks next> = temp$3;
/*Source Line Pos Tag: sline: 131 eline: 131 spos: 13 epos: 16 file: SLLBenchmarks.java*/
/*V[11] = AssignLocalToNextFieldTransformer(V[10]) // temp$2.<SLLBenchmarks: SLLBenchmarks next> = temp$3*/
/*V[11] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=null, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=null}*/
        temp$4 = head.<SLLBenchmarks: SLLBenchmarks next>;
/*Source Line Pos Tag: sline: 132 eline: 132 spos: 3 epos: 44 file: SLLBenchmarks.java*/
/*V[12] = AssignNextToLocalTransformer(V[11]) // temp$4 = head.<SLLBenchmarks: SLLBenchmarks next>*/
/*V[12] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=null, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=null}*/
        temp$5 = temp$4.<SLLBenchmarks: SLLBenchmarks next>;
/*Source Line Pos Tag: sline: 132 eline: 132 spos: 3 epos: 44 file: SLLBenchmarks.java*/
/*V[13] = AssignNextToLocalTransformer(V[12]) // temp$5 = temp$4.<SLLBenchmarks: SLLBenchmarks next>*/
/*V[13] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=null, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=null}*/
        temp$6 = new SLLBenchmarks;
/*Source Line Pos Tag: sline: 132 eline: 132 spos: 3 epos: 44 file: SLLBenchmarks.java*/
/*V[14] = AssignNewExprToLocalTransformer(V[13]) // temp$6 = new SLLBenchmarks*/
/*V[14] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=null, n3.next=null}*/
        specialinvoke temp$6.<SLLBenchmarks: void <init>()>();
/*Source Line Pos Tag: sline: 132 eline: 132 spos: 25 epos: 43 file: SLLBenchmarks.java*/
/*V[15] = V[14] // specialinvoke temp$6.<SLLBenchmarks: void <init>()>()*/
/*V[15] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=null, n3.next=null}*/
        temp$5.<SLLBenchmarks: SLLBenchmarks next> = temp$6;
/*Source Line Pos Tag: sline: 132 eline: 132 spos: 18 epos: 21 file: SLLBenchmarks.java*/
/*V[16] = AssignLocalToNextFieldTransformer(V[15]) // temp$5.<SLLBenchmarks: SLLBenchmarks next> = temp$6*/
/*V[16] : graph = {temp$9=null, temp$8=null, temp$7=null, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null}*/
        temp$7 = head.<SLLBenchmarks: SLLBenchmarks next>;
/*Source Line Pos Tag: sline: 133 eline: 133 spos: 3 epos: 45 file: SLLBenchmarks.java*/
/*V[17] = AssignNextToLocalTransformer(V[16]) // temp$7 = head.<SLLBenchmarks: SLLBenchmarks next>*/
/*V[17] : graph = {temp$9=null, temp$8=null, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null}*/
        temp$8 = temp$7.<SLLBenchmarks: SLLBenchmarks next>;
/*Source Line Pos Tag: sline: 133 eline: 133 spos: 3 epos: 45 file: SLLBenchmarks.java*/
/*V[18] = AssignNextToLocalTransformer(V[17]) // temp$8 = temp$7.<SLLBenchmarks: SLLBenchmarks next>*/
/*V[18] : graph = {temp$9=null, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null}*/
        temp$9 = temp$8.<SLLBenchmarks: SLLBenchmarks next>;
/*Source Line Pos Tag: sline: 133 eline: 133 spos: 3 epos: 45 file: SLLBenchmarks.java*/
/*V[19] = AssignNextToLocalTransformer(V[18]) // temp$9 = temp$8.<SLLBenchmarks: SLLBenchmarks next>*/
/*V[19] : graph = {temp$9=n3, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null}*/
        t = temp$9.<SLLBenchmarks: SLLBenchmarks next>;
/*Source Line Pos Tag: sline: 133 eline: 133 spos: 3 epos: 45 file: SLLBenchmarks.java*/
/*V[20] = AssignNextToLocalTransformer(V[19]) // t = temp$9.<SLLBenchmarks: SLLBenchmarks next>*/
/*V[20] : graph = {temp$9=n3, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null}*/
        if t != null goto label1;
/*Source Line Pos Tag: sline: 134 eline: 134 spos: 7 epos: 15 file: SLLBenchmarks.java*/
/*V[21] = !AssumeLocalEqNullTransformer(V[20]) // assume t != null*/
/*V[21] : false*/
/*V[22] = AssumeLocalEqNullTransformer(V[20]) // assume !(t != null)*/
/*V[22] : graph = {temp$9=n3, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null}*/

        goto label1;
/*Source Line Pos Tag: sline: 134 eline: 134 spos: 7 epos: 15 file: SLLBenchmarks.java*/
/*V[23] = V[22] // goto [?= return]*/
/*V[23] : graph = {temp$9=n3, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null}*/

     label1:
        return;
/*Source Line Pos Tag: sline: 134 eline: 134 spos: 7 epos: 15 file: SLLBenchmarks.java*/
/*V[24] = V[25] // return*/
/*V[24] : graph = {temp$9=n3, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null}*/
/*V[25] = Join_SLLDomain(V[21], V[23]) // return*/
/*V[25] : graph = {temp$9=n3, temp$8=n2, temp$7=n1, t=null, temp$6=n3, temp$5=n2, temp$4=n1, temp$3=n2, temp$2=n1, temp$1=n1, temp$0=n0, head=n0, n0.next=n1, n1.next=n2, n2.next=n3, n3.next=null}*/
    }

/*[]*/
/*8*/
    public void <init>()
    {
        SLLBenchmarks this;

        this := @this: SLLBenchmarks;
/*9*/
        specialinvoke this.<java.lang.Object: void <init>()>();
/*9*/
        return;
/*9*/
    }
}
